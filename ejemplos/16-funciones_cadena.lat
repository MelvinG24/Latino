poner("------------------------------------------------------")
poner("----------------Funciones de cadena-------------------")
poner("------------------------------------------------------\n")
lorem = "Lorem ipsum dolor sit amet, consectetur adipisicing elit,"
poner("------------------------------------------------------")
poner("cadena original:")
poner(lorem) #1: Lorem ipsum dolor sit amet, consectetur adipisicing elit,
#se concatena con ..
poner("------------------------------------------------------")
poner("concatenar:")
lorem = lorem .. "sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.."
poner(lorem) #2: Lorem ipsum dolor sit amet, consectetur adipisicing elit,sed do eiusmod tempor incididunt ut labore et dolore magna aliqua..

#comparar regresa un numero negativo si
#la cadena 1 es menor a la cadena 2
#0 si son iguales y positivo si es mayor
poner("------------------------------------------------------")
poner("comparar:")
lugar = "México"
poner(lorem)
#si(comparar(lorem, lugar) == 0)
si(cadena.comparar(lorem, lugar) == 0)
  poner("lorem es igual que: " .. lugar)
sino
  poner("lorem es diferente de: " .. lugar)
fin
#lorem es diferente de lugar
poner("------------------------------------------------------")
poner("contiene:")
#contiene, regresa verdadero o falso
#poner("lorem contiene 'ipsum'? " .. contiene(lorem, "ipsum"))
poner("lorem contiene 'ipsum'? " .. cadena.contiene(lorem, "ipsum"))

ipsum = lorem
poner("------------------------------------------------------")
poner("termina con:")
#termina_con regresa verdadero si una cadena termina con la palabra enviada
#poner("ipsum termina con 'aliqua'?" .. termina_con(ipsum, "aliqua"))
poner("ipsum termina con 'aliqua'?" .. cadena.termina_con(ipsum, "aliqua"))
poner(ipsum)

poner("------------------------------------------------------")
poner("indice:")
#indice regresa la posicion en la que se encuentra una palabra empezando con la posicion 0
#poner("se encontro la palabra 'amet' en la posicion: " .. indice(lorem, 'amet'))
poner("se encontro la palabra 'amet' en la posicion: " .. cadena.indice(lorem, 'amet'))

poner("------------------------------------------------------")
poner("insertar:")
#insertar, inserta una cadena nueva en la posicion especificada
poner(lorem)
#test = insertar(lorem, " amore ", 22)
test = cadena.insertar(lorem, " amore ", 22)
poner(test)

poner("------------------------------------------------------")
poner("ultimo indice:")
#ultimo indice, regresa la ultima posicion de una palabra dentro de una cadena
#poner("la ultima posicion en que se encuentra 'do' es: " .. ultimo_indice(lorem, "do"))
poner("la ultima posicion en que se encuentra 'do' es: " .. cadena.ultimo_indice(lorem, "do"))

poner("------------------------------------------------------")
poner("rellenar izquierda:")
#rellenar izquierda, rellena los lugares faltantes con el valor especificado "0"
#formateado = rellenar_izquierda("35", 10, "0")
formateado = cadena.rellenar_izquierda("35", "0", 10)
poner(formateado)

poner("------------------------------------------------------")
poner("rellenar derecha:")
#rellenar derecha, rellena los lugares faltantes con el valor especificado " "
//formateado = rellenar_derecha("35", 10, "0")
formateado = cadena.rellenar_derecha("35", "0", 10)
poner(formateado)

poner("------------------------------------------------------")
poner("eliminar:")
#eliminar, elimina una subcadena de la cadena principal
poner(lorem)
//poner(eliminar(lorem, "amet"))
poner(cadena.eliminar(lorem, "amet"))

poner("------------------------------------------------------")
poner("esta vacia:")
#esta_vacia, regresa verdadero si la cadena esta vacia
vacia = ""
poner(vacia)
//poner("esta vacia? " .. esta_vacia(vacia))
poner("esta vacia? " .. cadena.esta_vacia(vacia))

poner("------------------------------------------------------")
poner("longitud:")
#longitu, regresa la lingitud de una cadena
//poner("la longitu de lorem es: " .. longitud(lorem))
poner("la longitu de lorem es: " .. cadena.longitud(lorem))

poner("------------------------------------------------------")
poner("reemplazar:")
#reemplazar, sustituye una cadena por otra en una cadena
//poner(reemplazar(formateado, "0", "-"))
poner(cadena.reemplazar(formateado, "0", "-"))

poner("------------------------------------------------------")
poner("empieza con:")
#inicia_con, regresa verdadero si una cadena empieza con otra cadena
#sensible a mayusculas
poner(lorem)
//poner("lorem empieza con 'Lorem'? " .. inicia_con(lorem, 'Lorem'))
poner("lorem empieza con 'Lorem'? " .. cadena.inicia_con(lorem, 'Lorem'))

poner("------------------------------------------------------")
poner("minusculas:")
#minusculas, contiene en minusculas una cadena
poner(lorem)
//poner(minusculas(lorem))
poner(cadena.minusculas(lorem))

poner("------------------------------------------------------")
poner("mayusculas:")
#mayusculas, contiene en mayusculas una cadena
poner(lorem)
//poner(mayusculas(lorem))
poner(cadena.mayusculas(lorem))

poner("------------------------------------------------------")
poner("quitar espacios:")
#quitar espacios
con_espacios = '     palabra con espacios      '
poner(con_espacios)
//poner(recortar('     palabra con espacios      ') .. "..")
poner(cadena.recortar('     palabra con espacios      ') .. "..")

poner("------------------------------------------------------")
poner("es_numerico:")
#quitar espacios
numero = "1234..134"
//poner("es numerico: " .. es_numerico(numero))
poner("es numerico: " .. cadena.es_numerico(numero))

poner("------------------------------------------------------")
poner("es_alfanumerico:")
alfa = "variable1"
poner("es alfanumerico: " .. cadena.es_alfa(alfa))

#se puede acceder a un elemento de la cadena ya que es un arreglo de caracteres
str = "hola mundo"
poner(str[0])
str[4] = "-"
poner(str)

//FIXME: Error al obtener la ñ
str = "año"
poner(str)
poner("str[1] : " .. str[1])
