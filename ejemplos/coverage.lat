escribir("--------------------------------------------------------")
escribir("test coverage para variables")
escribir("--------------------------------------------------------")
n=nulo
escribir(n)
l=cierto
escribir(l)
e=+10
escribir(e)
d=1.5
escribir(d)
s="hola latino"
escribir(s)
s='ahora esta es una literal "hola latino"'
escribir(s)
PI=3.1416
escribir(PI)

escribir("--------------------------------------------------------")
escribir("test coverage para expresiones")
escribir("--------------------------------------------------------")
i = 1
d = 10.05

escribir("sumar---------------------------------------------------")
#entero + entero
escribir(i + i)  #a 1 se le suma 1 da como resultado 2

#entero + decimal
escribir(i + d) #a 1 se le suma 10.05 da como resultado 11.05

#decimal + entero
escribir(d + i) #da como resultado el decimal 11.05

#decimal + decimal
escribir(d + d) #da como resultado el decimal 20.1

escribir("restar--------------------------------------------------")
#entero - entero
escribir(i - (-1))  #a 1 se le resta -1 da como resultado 2

#entero - decimal
escribir(i - d) #a 1 se le suma 10.05 da como resultado -9.05

#decimal - entero
escribir(d - i) #da como resultado el decimal 9.05

#decimal - decimal
escribir(d - 0.05) #da como resultado el decimal 10

escribir("multiplicar---------------------------------------------")
#entero * entero
escribir(i * i) #da como resultado el decimal 1

#entero * decimal
escribir(i * d) #da como resultado el decimal 10.05

#decimal * entero
escribir(d * i) #da como resultado el decimal 10.05

#decimal * decimal
escribir(d * 0.5) #da como resultado el decimal 5.025

escribir("dividir-------------------------------------------------")
#entero / entero
escribir(i / i) #da como resultado el entero 1

#entero / decimal
escribir(i / d) #da como resultado el decimal 0.099502487562189

#decimal / entero
escribir(d / i) #da como resultado el entero 10

#decimal / decimal
escribir(d / 0.5) #da como resultado el decimal 20.1

escribir("modulo--------------------------------------------------")
#entero % entero
escribir(i % i) #da como resultado el entero 0

i = 21
#entero % decimal
escribir(i % d) #da como resultado el entero 1

escribir("--------------------------------------------------------")
escribir("test coverage para operadores de comparacion")
escribir("--------------------------------------------------------")
l = verdadero
e = 10
d = 3.14
lit = 'esto es una "literal"'
cad = "esto es una 'cadena'"
#comparador de negacion !
escribir("comparador de negacion !")
escribir("no falso: " . !falso)
#escribir(" no falso: " . !falso)
escribir("no verdadero: " . !verdadero)
#comparador de igualdad ==
escribir("comparador de igualdad ==")
escribir(l . " == falso: " . l == falso)
escribir(e . " == 10: " . e == 10)
escribir(d . " == 3.0: " . d == 3.0)
escribir(lit . " == 'hola': " . lit == 'hola')
escribir(cad . " == esto es una 'cadena': " . cad == "esto es una 'cadena'")
#podemos comparar diferentes tipos de datos
escribir("e es igual a '10': " . e == "10")
escribir("d es diferente a '10': " . d != "10")
escribir("----------------------------------------------------------------")
#comparador de desigualdad !=
escribir("comparador de desigualdad !=")
escribir(l . " != falso: " . l != falso)
escribir(e . " != 10: " . e != 10)
escribir(d . " != 3.0: " . d != 3.0)
escribir(lit . " != 'hola': " . lit != 'hola')
escribir(cad . " != esto es una 'cadena': " . cad != "esto es una 'cadena'")
escribir("----------------------------------------------------------------")
#comparador menor que <
escribir("comparador menor que <")
escribir(e . " < 10: " . e < 10)
escribir(d . " < 3.0: " . d < 3.0)
escribir(lit . " < 'hola': " . lit < 'hola')
escribir(cad . " < esto es una 'cadena': " . cad < "esto es una 'cadena'")
escribir("----------------------------------------------------------------")
#comparador mayor que >
escribir("comparador mayor que >")
escribir(e . " > 10: " . e > 10)
escribir(d . " > 3.0: " . d > 3.0)
escribir(lit . " > 'hola': " . lit > 'hola')
escribir(cad . " > esto es una 'cadena': " . cad > "esto es una 'cadena'")
escribir("----------------------------------------------------------------")
#comparador menor igual que <=
escribir("comparador menor igual que <=")
escribir(e . " <= 10: " . e <= 10)
escribir(d . " <= 3.0: " . d <= 3.0)
escribir(lit . " <= 'hola': " . lit <= 'hola')
escribir(cad . " <= esto es una 'cadena': " . cad <= "esto es una 'cadena'")
escribir("----------------------------------------------------------------")
#comparador mayor igual que >=
escribir("comparador mayor igual que >=")
escribir(e . " >= 10: " . e >= 10)
escribir(d . " >= 3.0: " . d >= 3.0)
escribir(lit . " >= 'hola': " . lit >= 'hola')
escribir(cad . " >= esto es una 'cadena': " . cad >= "esto es una 'cadena'")

escribir("--------------------------------------------------------")
escribir("test coverage para operadores logicos")
escribir("--------------------------------------------------------")
v = verdadero
f = falso
#&& y (and) logico
escribir("&& y (and) logico")
escribir("falso y falso: " . f && f)
escribir("verdadero y falso: " . v && f)
escribir("falso y verdadero: " . f && v)
escribir("verdadero y verdadero: " . v && v)

#|| o (or) logico
escribir("=============================")
escribir("|| o (or) logico")
escribir("falso o falso: " . f || f)
escribir("verdadero o falso: " . v || f)
escribir("falso o verdadero: " . f || v)
escribir("verdadero o verdadero: " . v || v)

#operadores logicos por corto circuito
escribir("----- y logico (&&)")
x = verdadero && "str"
escribir("x: " . x)   #str

x = "1" && ""
escribir("x: " . x)   #

x = falso && "str"
escribir("x: " . x)   #falso

x = falso && ""
escribir("x: " . x)   #falso

escribir("----- o logico (||)")
x = verdadero || "str"
escribir("x: " . x)   #verdadero

x = "1" || ""
escribir("x: " . x)   #1

x = falso || "str"
escribir("x: " . x)   #str

x = falso || ""
escribir("x: " . x)   #

escribir("cambio de tipos de dato a booleanos")
#cambio de tipos de dato a booleanos
#x=0 #0 y 0.0 es considerado falso cualquier otro valor numerico es verdadero
#x = -2  #-2 es verdadero
#x = "2"  #se convierte la cadena "2" a numerico quedando 2  y es verdadero
#x="" #la cadena vacia "" o "0" o "falso" o "false" es considerada falso cualquier otro valor es verdadero
x = []  #una lista vacia es considerada falso
escribir("x: " . x)
si(x)
    escribir("es verdadero")
sino
    escribir("es falso")
fin


escribir("--------------------------------------------------------")
escribir("test coverage para sentencia si")
escribir("--------------------------------------------------------")
num = 10
si num < 0
    escribir("es negativo")
sino
    escribir("es positivo")
fin

escribir("--------------------------------------------------------")
escribir("test coverage para sentencia elegir")
escribir("--------------------------------------------------------")
c = 'a'
## multiples casos con opcion defecto
elegir(c)
caso 'x':
    escribir("c vale x")
caso 'a':
    escribir("c vale a")
caso 'z':
    escribir("c vale z")
defecto:
    escribir("default")
fin

escribir("--------------------------------------------------------")
escribir("test coverage para sentencia mientras")
escribir("--------------------------------------------------------")
i = 0
mientras i < 10
    escribir(i)
    i++     #esto es lo mismo que i = i + 1
fin

escribir("tablas de multiplicar")
i=1
mientras i<=10
  j=1
  mientras j<=10
    escribir(i . " X " . j . " = " . i*j)
    j++
  fin
  i++
fin

escribir("--------------------------------------------------------")
escribir("test coverage para sentencia repetir")
escribir("--------------------------------------------------------")
i = 0
repetir
    escribir(i)
    i++
hasta i == 10

escribir("--------------------------------------------------------")
escribir("test coverage para sentencia desde")
escribir("--------------------------------------------------------")
escribir("del 10 al 1:")
desde(i=10; i>0; i--)
    escribir(i)
fin
escribir("escribir de dos en dos descendente")
desde(i=10; i>0; i=i-2)
    escribir(i)
fin

escribir("--------------------------------------------------------")
escribir("test coverage para funciones")
escribir("--------------------------------------------------------")
funcion promedio(a,b)
    retorno (a+b)/2
fin

funcion max(a,b)
    si (a > b)
        retorno a
    sino
        retorno b
    fin
fin

funcion min(a,b)
    si (a < b)
        retorno a
    sino
        retorno b
    fin
fin

escribir("promedio de 3 y 5: " . promedio(3, 5)) #4
escribir("maximo de 3 y 5: " . max(3, 5)) #5
escribir("minimo de 3 y 5: " . min(3, 5)) #3

escribir("--------------------------------------------------------")
escribir("test coverage para funciones recursiva")
escribir("--------------------------------------------------------")
funcion fibo_rec(n)
    si ( n < 2 )
        retorno n
    fin
    retorno fibo_rec(n-1) + fibo_rec(n-2)
fin

imprimir ("version recursiva")
desde (i=0; i < 15; i++)
    imprimir(i . ": " . fibo_rec(i))
fin

#se pueden crear disparadores (triggers) en latino
#accion para /test
funcion test_accion (arg1)
  escribir("test_accion: " . arg1)
fin
#accion para /id
funcion id_accion (arg1)
  escribir("id_accion: " . arg1)
fin

#listado de disparadores
#test_accion y id_accion son los nombres de las funciones a invocar
triggers = [
  {"comando" : "/test", "accion":test_accion},
  {"comando" : "/id", "accion":id_accion}
]

texto = "/test"  #para test
//desde (i=0; i<triggers->longitud(); i++)
desde (i=0; i< lista->longitud(triggers); i++)
  si texto == triggers[i]->comando
    #ejecuto el disparador (trigger) para test_accion
    //fun = triggers[i]->accion
    //fun("enviando desde triggers")
    triggers[i]->accion("enviando desde triggers")
  fin
fin

escribir("--------------------------------------------------------")
escribir("test coverage para escritura / lectura de archivos")
escribir("--------------------------------------------------------")

s = 'variable = 23
funcion sumatoria(a, b)
  retorno (a + b)
fin
//se deben de regresar las funciones y variables que se quieran exponer del modulo
retornar {"variable" : variable,
	"sumatoria" : sumatoria}
'
//escribir_archivo("modulo.lat", s)
archivo->escribir("modulo.lat", s)
//s = leer_archivo("modulo.lat")
s = archivo->leer("modulo.lat")
escribir(s)

lineas = archivo->lineas("modulo.lat")
escribir(lineas)

archivo->copiar("modulo.lat", "modulo_copia.lat")

archivo->ejecutar("../ejemplos/42-menu.lat")

####################################################################
#test coverage para "incluir"
####################################################################
//incluir("modulo")
//r = sumatoria(2, 3)
mod = incluir("modulo")
r = mod->sumatoria(2, 3)
escribir(r)

escribir("--------------------------------------------------------")
escribir("test coverage para listas")
escribir("--------------------------------------------------------")
#Crear una lista es tan sencillo como indicar entre corchetes y separados por comas
#los valores que queremos incluir en la lista.
numeros = [1, 2, 3, 4, 5]
vacia = []

#Podemos acceder a cada uno de los elementos de la lista escribiendo el nombre de
#la lista e indicando el índice del elemento entre corchetes.
#Ten en cuenta que el índice del primer elemento de la lista es 0:
escribir(numeros[1])
#salida: 2

#También podemos utilizar este operador para modificar un elemento de la lista si lo
#colocamos en la parte izquierda de una asignación:
numeros[0] = 99
escribir(numeros)
#salida:  [99, 2, 3, 4, 5]

#agrega un elemento a la lista
//agregar(numeros, 6)
lista->agregar(numeros, 6)
escribir(numeros)
#salida:  [99, 2, 3, 4, 5, 6]

#se valida que el valor este en el rango del numero de elementos
#escribir(numeros[-1])
#salida: Indice fuera de rango
#escribir(numeros[5])
#salida: Indice fuera de rango

#listas multiples
m = [[1,2,3],
     ['a', 'b', 'c'],
     ['alpha', 'beta', 'gamma']]

escribir(m)

lst = [123, 'xyz', 'zara', 'abc']
escribir("Lista inicial: " . lst)
//lst->agregar(2009)  #agregar(aList, 2009)
lista->agregar(lst, 2009)  #agregar(aList, 2009)
//agregar(lst, "ultimo elemento")
lista->agregar(lst, "ultimo elemento")
escribir("Lista actualizada: " . lst)
lst[0] = 321
escribir("Lista actualizada: " . lst)
escribir("Lista en 1: " . lst[1])
#escribir("Longitud: " . longitud(lst))
escribir("Longitud: " . lista->longitud(lst))
list1 = [123, 'xyz']
list2 = ['456', 'abc']
list3 = [456, 'abc', 786]
list4 = ['123', 'xyz']
escribir(list1)
escribir(list2)
escribir(list3)
escribir(list4)
//escribir(comparar(list1, list2))
escribir(lista->comparar(list1, list2))
//escribir(list2->comparar(list1))
escribir(lista->comparar(list2, list1))
//escribir(comparar(list2, list3))
//escribir(comparar(list1, list4))
//escribir(comparar(list1, [123, 'xyz']))
escribir(lista->comparar(list2, list3))
escribir(lista->comparar(list1, list4))
escribir(lista->comparar(list1, [123, 'xyz']))
//list1->extender(list2)
lista->extender(list1, list2)
escribir(list1)
//extender(list3, list4)
lista->extender(list3, list4)
escribir(list3)
//escribir(list3->indice(786))
//FIXME:  Error: Linea 0, 0: Numero invalido de argumentos en funcion '(null)'. se esperaban 0 valores.
//en archivo '/home/latino/src/latino-backup/bin/modulo.lat'
//escribir(lista->indice(list3, 786))
//list3->insertar("xxx", 0) #inicio

lista->insertar(list3, "xxx", 0) #inicio
escribir(list3)
//list3->insertar("zzz", 6) #fin
lista->insertar(list3, "zzz", 6) #fin
escribir(list3)
//list3->insertar("yyy", 3) #en medio
lista->insertar(list3, "yyy", 3) #en medio
escribir(list3)
//list3->eliminar(786)
lista->eliminar(list3, 786)
escribir(list3)
//list3->eliminar('123')
lista->eliminar(list3, '123')
escribir(list3)
//list3->eliminar('aaa')
lista->eliminar(list3, 'aaa')
escribir(list3)
//list3->eliminar_indice(0)
lista->eliminar_indice(list3, 0)
escribir(list3)
//list3->eliminar_indice(4)
lista->eliminar_indice(list3, 1)
escribir(list3)
#list3->eliminar_indice(4)   #indice fuera de rango
//list5 = list3->invertir()
list5 = lista->invertir(list3)
escribir(list5)
//escribir(comparar(['123', 'xyz'], [123, 'xyz']))
escribir(lista->comparar(['123', 'xyz'], [123, 'xyz']))
escribir(list1)
//escribir(comparar(list1, [123, 'xyz']))
escribir(lista->comparar(list1, [123, 'xyz']))

escribir(list3)
si lista->contiene(list3, "zzz")
  escribir("se encontro zzz en list3")
  escribir("el elemento 'zzz' se encontro en la posicion: " . lista->indice(list3, "zzz"))
fin

escribir("--------------------------------------------------------------------")
escribir("Ejemplo de matrices con listas")
escribir("--------------------------------------------------------------------")
m1 = [[1,2,3],
     [4,5,6],
     [7,8,9]]

m2 = [[9,8,7],
     [6,5,4],
     [3,2,1]]

escribir("Matriz m1: ")
escribir(m1)
escribir("Matriz m2: ")
escribir(m2)

escribir("Elemento m1[0]: " . m1[0])
escribir("Elemento m1[1][1]: " . m1[1][1])

/*m1[0] = [3, 2, 1]
escribir("Se cambia m1[0]: ")
escribir(m1)

m1[1][1] = 25
escribir("Se cambia m1[1][1]: ")
escribir(m1)

m1[0] = m2[1]
escribir("Se cambia m1[0]: ")
escribir(m1)

m1[1][1] = m2[1][1] * 100
escribir("Se cambia m1[1][1]: ")
escribir(m1)
escribir("m2 no se modifico: ")
escribir(m2)
*/

escribir("--------------------------------------------------------------------")
escribir("Ejemplo de matrices multidimensionales")
escribir("--------------------------------------------------------------------")
mm = [[[1,2,3,7],
     [4,5,6,7],
     [7,8,9,7]],
     [[1,2,3,7],
     [4,5,7,7],
     [7,8,9,7]],
     [[1,2,3,7],
     [4,5,6,7],
     [7,8,9,7]]]

i = 0
j = 1
k = 2
escribir(mm)
escribir("mm en i:")
escribir(mm[i])
escribir("mm en i, j:")
escribir(mm[i][j])
escribir("mm en i, j ,k:")
escribir(mm[i][j][k])


escribir("--------------------------------------------------------------------")
escribir("Iterar sobre una lista / matriz")
escribir("--------------------------------------------------------------------")
//desde (i=0; i < list1->longitud(); i++)
desde (i=0; i < lista->longitud(list1); i++)
  escribir("lista en " . i . " es: " . list1[i])
fin

#Para recorrer una matriz se anidan dos ciclos desde
//desde (i=0; i < longitud(m1); i++)  # longitud(m1) = 3 ya que es una lista que a su vez contiene 3 listas
desde (i=0; i < lista->longitud(m1); i++)  # longitud(m1) = 3 ya que es una lista que a su vez contiene 3 listas
  //desde (j=0; j < m1[0]->longitud(); j++) #aqui tomamos la longitud del primer elemento es decir la lista interna
  desde (j=0; j < lista->longitud(m1[0]); j++) #aqui tomamos la longitud del primer elemento es decir la lista interna
    escribir("lista en " . i . ", " . j . " es: " . m1[i][j])
  fin
fin

escribir("--------------------------------------------------------")
escribir("test coverage para diccionarios")
escribir("--------------------------------------------------------")
dic = { "Chilindrina": "Maria Antonieta de las Nieves",
     "El chavo del 8": "Roberto Gomez Bolaños",
     "Tres patines": "Leopoldo Fernandez" }

#mandamos a consola el diccionario o podemos obtener su representacion en cadena
//str = dic->cadena()
//escribir(str)
//str = convertir->cadena(dic)
//escribir(str)

#cambiamos un elemento
dic["Chilindrina"] = "Maria Antonieta"
escribir("")
escribir(dic)

#cambiamos un elemento que no existe, "lo inserta"
dic["CH"] = "Chapulin Colorado"
escribir("")
escribir(dic)

dic["CH"] = "Chapulin C."
escribir(dic->CH)

#obtenemos la longitud del diccionario
//escribir("Num de elementos: " . dic->longitud())
escribir("Num de elementos: " . diccionario->longitud(dic))

#ejemplo de request de la api de telegram

true = verdadero
false = falso
dic = {"ok":true,
       "result":[
          {"update_id":710556635,
            "message":{"message_id":130,
                       "from":{"id":269610735,"first_name":"Primitivo","last_name":"Roman"},
                       "chat":{"id":269610735,"first_name":"Primitivo","last_name":"Roman","type":"private"},
                       "date":1474906910,
                       "text":"esto es una prueba print (\"hola mundo\")",
                       "entities":[{"type":"code","offset":19,"length":20}]}}]}


escribir(dic->ok)
escribir(dic->result)
escribir(dic->result[0])
escribir(dic->result[0]->message)
escribir(dic->result[0]->message->text)
dic->result[0]->message->text = "bla bla bla"  //FIXME: error no asigna el valor
msg = dic->result[0]->message
msg->text = "bla bla bla"
escribir(msg->text)

#obtenemos el valor de un elemento que no existe
escribir("")
ch = dic["CH2"] #Error: Linea 25, 10: No se encontro la llave 'CH2' en el diccionario.
escribir(ch)

escribir("------------------------------------------------------")
escribir("----------------Funciones de cadena-------------------")
escribir("------------------------------------------------------\n")
lorem = "Lorem ipsum dolor sit amet, consectetur adipisicing elit,"
escribir("------------------------------------------------------")
escribir("cadena original:")
escribir(lorem) #1: Lorem ipsum dolor sit amet, consectetur adipisicing elit,
#se concatena con .
escribir("------------------------------------------------------")
escribir("concatenar:")
lorem = lorem . "sed do eiusmod tempor incididunt ut labore et dolore magna aliqua."
escribir(lorem) #2: Lorem ipsum dolor sit amet, consectetur adipisicing elit,sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.

#comparar regresa un numero negativo si
#la cadena 1 es menor a la cadena 2
#0 si son iguales y positivo si es mayor
escribir("------------------------------------------------------")
escribir("comparar:")
lugar = "México"
escribir(lorem)
#si(comparar(lorem, lugar) == 0)
si(cadena->comparar(lorem, lugar) == 0)
  escribir("lorem es igual que: " . lugar)
sino
  escribir("lorem es diferente de: " . lugar)
fin
#lorem es diferente de lugar
escribir("------------------------------------------------------")
escribir("contiene:")
#contiene, regresa verdadero o falso
#escribir("lorem contiene 'ipsum'? " . contiene(lorem, "ipsum"))
escribir("lorem contiene 'ipsum'? " . cadena->contiene(lorem, "ipsum"))

ipsum = lorem
escribir("------------------------------------------------------")
escribir("termina con:")
#termina_con regresa verdadero si una cadena termina con la palabra enviada
#escribir("ipsum termina con 'aliqua'?" . termina_con(ipsum, "aliqua"))
escribir("ipsum termina con 'aliqua'?" . cadena->termina_con(ipsum, "aliqua"))
escribir(ipsum)

escribir("------------------------------------------------------")
escribir("indice:")
#indice regresa la posicion en la que se encuentra una palabra empezando con la posicion 0
#escribir("se encontro la palabra 'amet' en la posicion: " . indice(lorem, 'amet'))
escribir("se encontro la palabra 'amet' en la posicion: " . cadena->indice(lorem, 'amet'))

escribir("------------------------------------------------------")
escribir("insertar:")
#insertar, inserta una cadena nueva en la posicion especificada
escribir(lorem)
#test = insertar(lorem, " amore ", 22)
test = cadena->insertar(lorem, " amore ", 22)
escribir(test)

escribir("------------------------------------------------------")
escribir("ultimo indice:")
#ultimo indice, regresa la ultima posicion de una palabra dentro de una cadena
#escribir("la ultima posicion en que se encuentra 'do' es: " . ultimo_indice(lorem, "do"))
escribir("la ultima posicion en que se encuentra 'do' es: " . cadena->ultimo_indice(lorem, "do"))

escribir("------------------------------------------------------")
escribir("rellenar izquierda:")
#rellenar izquierda, rellena los lugares faltantes con el valor especificado "0"
#formateado = rellenar_izquierda("35", 10, "0")
formateado = cadena->rellenar_izquierda("35", 10, "0")
escribir(formateado)

escribir("------------------------------------------------------")
escribir("rellenar derecha:")
#rellenar derecha, rellena los lugares faltantes con el valor especificado " "
//formateado = rellenar_derecha("35", 10, "0")
formateado = cadena->rellenar_derecha("35", 10, "0")
escribir(formateado)

escribir("------------------------------------------------------")
escribir("eliminar:")
#eliminar, elimina una subcadena de la cadena principal
escribir(lorem)
//escribir(eliminar(lorem, "amet"))
escribir(cadena->eliminar(lorem, "amet"))

escribir("------------------------------------------------------")
escribir("esta vacia:")
#esta_vacia, regresa verdadero si la cadena esta vacia
vacia = ""
escribir(vacia)
//escribir("esta vacia? " . esta_vacia(vacia))
escribir("esta vacia? " . cadena->esta_vacia(vacia))

escribir("------------------------------------------------------")
escribir("longitud:")
#longitu, regresa la lingitud de una cadena
//escribir("la longitu de lorem es: " . longitud(lorem))
escribir("la longitu de lorem es: " . cadena->longitud(lorem))

escribir("------------------------------------------------------")
escribir("reemplazar:")
#reemplazar, sustituye una cadena por otra en una cadena
//escribir(reemplazar(formateado, "0", "-"))
escribir(cadena->reemplazar(formateado, "0", "-"))

escribir("------------------------------------------------------")
escribir("empieza con:")
#inicia_con, regresa verdadero si una cadena empieza con otra cadena
#sensible a mayusculas
escribir(lorem)
//escribir("lorem empieza con 'Lorem'? " . inicia_con(lorem, 'Lorem'))
escribir("lorem empieza con 'Lorem'? " . cadena->inicia_con(lorem, 'Lorem'))

escribir("------------------------------------------------------")
escribir("minusculas:")
#minusculas, contiene en minusculas una cadena
escribir(lorem)
//escribir(minusculas(lorem))
escribir(cadena->minusculas(lorem))

escribir("------------------------------------------------------")
escribir("mayusculas:")
#mayusculas, contiene en mayusculas una cadena
escribir(lorem)
//escribir(mayusculas(lorem))
escribir(cadena->mayusculas(lorem))

escribir("------------------------------------------------------")
escribir("quitar espacios:")
#quitar espacios
con_espacios = '     palabra con espacios      '
escribir(con_espacios)
//escribir(quitar_espacios('     palabra con espacios      ') . ".")
escribir(cadena->quitar_espacios('     palabra con espacios      ') . ".")

escribir("------------------------------------------------------")
escribir("es_numerico:")
#quitar espacios
numero = "1234.134"
//escribir("es numerico: " . es_numerico(numero))
escribir("es numerico: " . cadena->es_numerico(numero))

escribir("------------------------------------------------------")
escribir("es_alfanumerico:")
alfa = "variable1"
escribir("es alfanumerico: " . cadena->es_alfa(alfa))

#se puede acceder a un elemento de la cadena ya que es un arreglo de caracteres
str = "hola mundo"
escribir(str[0])
str[4] = "-"
escribir(str)

str = "año"
escribir(str[0])

escribir("------------------------------------------------------")
escribir("------------Conversion entre tipos de dato------------")
escribir("------------------------------------------------------\n")
escribir(tipo(str))
escribir(convertir->logico("1"))
escribir(convertir->numerico("25.00"))
escribir(convertir->cadena(3.1416))

escribir("------------------------------------------------------")
escribir("----------------Funciones de redis-------------------")
escribir("------------------------------------------------------\n")

//se conecta con el servicio de redis corriendo en el puerto 6379
//conexion = redis_conectar("127.0.0.1", 6379)
conexion = redis->conectar("127.0.0.1", 6379)
# Redis de 1 llave
imprimir("#### Valores de 1 llave ####")
//asignamos una clave
//redis_asignar(conexion, "Latino", "Hola amigos latinos")
redis->asignar(conexion, "Latino", "Hola amigos latinos")

//asignamos un entero a otra llave
//redis_asignar(conexion, "entero", "0")
redis->asignar(conexion, "entero", "0")

// obtenemos los valores Redis de 1 llave
//cadena = redis_obtener(conexion, "Latino")
//entero  = redis_obtener(conexion, "entero")
cadena = redis->obtener(conexion, "Latino")
entero  = redis->obtener(conexion, "entero")

// Devolvemos los valores Redis de 1 llave
imprimir("El valor de la cadena es:\t".cadena, 1)
imprimir("El valor del entero es:\t\t".entero, 1)

// le aumentamos 1 al entero y lo declaramos
//nuevo_valor = redis_aumentar(conexion, "entero")
nuevo_valor = redis->aumentar(conexion, "entero")
imprimir("Ahora el entero vale:\t\t".nuevo_valor, 1)
// le incrementamos el valor que desees, en este caso es 5
//nuevo_valor = redis_incrementar(conexion, "entero", 5)
nuevo_valor = redis->incrementar(conexion, "entero", 5)
imprimir("Se le incrementa 5 al entero:\t".nuevo_valor, 1)

// borramos las llaves
//redis_borrar(conexion, "Latino")
//redis_borrar(conexion, "entero")
redis->borrar(conexion, "Latino")
redis->borrar(conexion, "entero")

//////////////////\\\\\\\\\\\\\\\\\\\\

# Redis de 2 llaves
imprimir("\n#### Valores de 2 llaves ####", 1)
//asignamos una clave
//redis_hasignar(conexion, "latino", "saludo", "Hola amigo Latino")
redis->hasignar(conexion, "latino", "saludo", "Hola amigo Latino")

//asignamos un entero a otra llave
//redis_hasignar(conexion, "entero", "valor", "0")
redis->hasignar(conexion, "entero", "valor", "0")

// obtenemos los valores Redis de 1 llave
//cadena = redis_hobtener(conexion, "latino", "saludo")
//entero  = redis_hobtener(conexion, "entero", "valor")
cadena = redis->hobtener(conexion, "latino", "saludo")
entero  = redis->hobtener(conexion, "entero", "valor")

// Devolvemos los valores Redis de 1 llave
imprimir("El valor de la cadena es:\t".cadena, 1)
imprimir("El valor del entero es:\t\t".entero, 1)

// le aumentamos 1 al entero y lo declaramos
//nuevo_valor = redis_haumentar(conexion, "entero", "valor")
nuevo_valor = redis->haumentar(conexion, "entero", "valor")
imprimir("Ahora el entero vale:\t\t".nuevo_valor, 1)
// le incrementamos el valor que desees, en este caso es 5
//nuevo_valor = redis_hincrementar(conexion, "entero", "valor", 5)
nuevo_valor = redis->hincrementar(conexion, "entero", "valor", 5)
imprimir("Se le incrementa 5 al entero:\t".nuevo_valor, 1)

// borramos las llaves
//redis_hborrar(conexion, "latino", "saludo")
//redis_hborrar(conexion, "entero", "valor")
redis->hborrar(conexion, "latino", "saludo")
redis->hborrar(conexion, "entero", "valor")

// Prueba del servicio Redis
imprimir("\n### Devolución del ping ###", 1)
//ping = redis_ping(conexion)
ping = redis->ping(conexion)
imprimir("PING:\t\t".ping, 1)

// terminamos la conexión
//redis_liberar(conexion)
redis->liberar(conexion)

escribir("------------------------------------------------------")
escribir("----------------Funciones de curl-------------------")
escribir("------------------------------------------------------\n")
busqueda = "perros y gatos"
imprimir("El texto escrito ya codificado es:\t" . curl->escape(busqueda), 1)
resp = curl->peticion("https://www.google.com.mx/search?q=" . curl->escape(busqueda))
escribir(resp)

escribir("------------------------------------------------------")
escribir("----------------Funciones de json---------------------")
escribir("------------------------------------------------------\n")
str = '{"ok":true,"result":[{"update_id":558904697, "message":{"message_id":4507,"from":{"id":189041244,"first_name":"Bruno Ric (K)","username":"Jarriz"},"chat":{"id":189041244,"first_name":"Bruno Ric (K)","username":"Jarriz","type":"private"},"date":1475275449,"text":"+\u20ac+#+(#(#(#\\^"}}]}'
#convierte una cadena json a un objeto latino
//dic = json_decodificar(str)
dic = json->decodificar(str)
escribir("dic: " . dic)
#accedo a un valor del objeto
escribir("dic->result[0]->message->text: " . dic->result[0]->message->text)
#convierte un objeto latino a una cadena json
//str = json_codificar(dic)
str = json->codificar(dic)
escribir("str: " . str)

url = "https://raw.githubusercontent.com/yagop/node-telegram-bot-api/master/package.json"
//str = peticion(url)
str = curl->peticion(url)
escribir(str)
//jsn = json_decodificar(str)
jsn = json->decodificar(str)
escribir(jsn)

escribir("------------------------------------------------------")
escribir("----------------Funciones de mate---------------------")
escribir("------------------------------------------------------\n")
escribir("ingresa un numero decimal")
x = 0.58
escribir("arco coseno de x: " . mate->acos(x))
escribir("arco tangente de x: " . mate->atan(x))
escribir("coseno hiperbolico de x: " . mate->cosh(x))
escribir("seno hiperbolico de x: " . mate->senh(x))
escribir("tangente hiperbolica de x: " . mate->tanh(x))
escribir("logaritmo natural de x: " . mate->log(x))
escribir("raiz cuadrada de x: " . mate->raiz(x))
escribir("redondeo abajo x: " . mate->piso(x))
escribir("aleatorio entre 0-9: " . mate->aleatorio(0,9))
escribir("arco seno de x: " . mate->asen(x))
escribir("coseno de x: " . mate->cos(x))
escribir("seno de x: " . mate->sen(x))
escribir("tangente de x: " . mate->tan(x))
escribir("logaritmo natural base 10 de x: " . mate->log10(x))
escribir("redondeo arriba x: " . mate->techo(x))
escribir("valor absoluto de -10: " . mate->abs(-10))
escribir("x^3: " . mate->pot(x, 3))
y = 3.14
escribir("ldexp de x: " . mate->ldexp(x, y))
escribir("y vale: " . y)
escribir("arco tangente2 de x: " . mate->atan2(x, y))
escribir("y vale: " . y)
escribir("frexp de x: " . mate->frexp(x, y))
escribir("y vale: " . y)

escribir("------------------------------------------------------")
escribir("----------------Funciones de sistema---------------------")
escribir("------------------------------------------------------\n")
cmd = "echo 'hola mundo'"
salida = sistema->ejecutar(cmd)
salida = sistema->pipe(cmd)
escribir("salida: ")
escribir("---------------------------------------------------")
escribir(salida)
escribir(sistema->fecha("hora"))
funcion alarma(tiempo)
    sistema->dormir(tiempo)
    escribir("despierta...")
fin
escribir("estoy durmiendo...")
#espera 10 segundos y muestra el mensaje
alarma(10)
limpiar()
sistema->salir()
