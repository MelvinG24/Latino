        -:    0:Source:/home/latino/src/latino/src/object.c
        -:    0:Programs:13
        -:    1:/*
        -:    2:The MIT License (MIT)
        -:    3:
        -:    4:Copyright (c) 2015 - Latino
        -:    5:
        -:    6:Permission is hereby granted, free of charge, to any person obtaining a copy
        -:    7:of this software and associated documentation files (the "Software"), to deal
        -:    8:in the Software without restriction, including without limitation the rights
        -:    9:to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
        -:   10:copies of the Software, and to permit persons to whom the Software is
        -:   11:furnished to do so, subject to the following conditions:
        -:   12:
        -:   13:The above copyright notice and this permission notice shall be included in
        -:   14:all copies or substantial portions of the Software.
        -:   15:
        -:   16:THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        -:   17:IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
        -:   18:FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
        -:   19:AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
        -:   20:LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
        -:   21:OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
        -:   22:THE SOFTWARE.
        -:   23:*/
        -:   24:
        -:   25:#include "object.h"
        -:   26:
        -:   27:#include <stdlib.h>
        -:   28:#include <stddef.h>
        -:   29:#include <stdio.h>
        -:   30:
        -:   31:#include "latino.h"
        -:   32:#include "utils.h"
        -:   33:#include "libstring.h"
        -:   34:#include "libmem.h"
        -:   35:
function lat_asignar_contexto_objeto called 95 returned 100% blocks executed 80%
       95:   36:void lat_asignar_contexto_objeto(lat_objeto* ns, lat_objeto* name, lat_objeto* o)
        -:   37:{
       95:   38:    if (ns->type != T_INSTANCE)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:   39:    {
        -:   40:        debug("ns->type: %d", ns->type);
    #####:   41:        lat_registrar_error("Namespace no es una instancia");
call    0 never executed
        -:   42:    }
        -:   43:    else
        -:   44:    {
       95:   45:        hash_map* h = ns->data.nombre;
       95:   46:        set_hash(h, lat_obtener_cadena(name), (void*)o);
call    0 returned 100%
call    1 returned 100%
        -:   47:    }
       95:   48:}
        -:   49:
function lat_obtener_contexto_objeto called 153 returned 100% blocks executed 60%
      153:   50:lat_objeto* lat_obtener_contexto_objeto(lat_objeto* ns, lat_objeto* name)
        -:   51:{
      153:   52:    if (ns->type != T_INSTANCE)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:   53:    {
        -:   54:        debug("ns->type: %d", ns->type);
    #####:   55:        lat_registrar_error("Namespace is not an nombre");
call    0 never executed
        -:   56:    }
        -:   57:    else
        -:   58:    {
      153:   59:        hash_map* h = ns->data.nombre;
      153:   60:        lat_objeto* ret = (lat_objeto*)get_hash(h, lat_obtener_cadena(name));
call    0 returned 100%
call    1 returned 100%
      153:   61:        if (ret == NULL)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:   62:        {
    #####:   63:            lat_registrar_error("Variable \"%s\" indefinida", lat_obtener_cadena(name));
call    0 never executed
call    1 never executed
        -:   64:        }
      153:   65:        return ret;
        -:   66:    }
    #####:   67:    return NULL;
        -:   68:}
        -:   69:
function lat_contexto_contiene called 0 returned 0% blocks executed 0%
    #####:   70:int lat_contexto_contiene(lat_objeto* ns, lat_objeto* name)
        -:   71:{
    #####:   72:    if (ns->type != T_INSTANCE)
branch  0 never executed
branch  1 never executed
        -:   73:    {
        -:   74:        debug("ns->type: %d", ns->type);
    #####:   75:        lat_registrar_error("Namespace no es una instancia");
call    0 never executed
        -:   76:    }
        -:   77:    else
        -:   78:    {
    #####:   79:        hash_map* h = ns->data.nombre;
    #####:   80:        lat_objeto* ret = (lat_objeto*)get_hash(h, lat_obtener_cadena(name));
call    0 never executed
call    1 never executed
    #####:   81:        if (ret == NULL)
branch  0 never executed
branch  1 never executed
        -:   82:        {
        -:   83:            return 0;
        -:   84:        }
    #####:   85:        return 1;
        -:   86:    }
    #####:   87:    return 0;
        -:   88:}
        -:   89:
function lat_crear_objeto called 0 returned 0% blocks executed 0%
    #####:   90:lat_objeto* lat_crear_objeto(lat_vm* vm)
        -:   91:{
      148:   92:    lat_objeto* ret = (lat_objeto*)lat_asignar_memoria(sizeof(lat_objeto));
call    0 returned 100%
call    1 never executed
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
call    5 never executed
call    6 returned 100%
call    7 returned 100%
call    8 returned 100%
call    9 returned 100%
call   10 never executed
      148:   93:    ret->type = T_NULO;
      148:   94:    ret->data_size = 0;
    #####:   95:    return ret;
        -:   96:}
        -:   97:
function lat_instancia called 1 returned 100% blocks executed 100%
        1:   98:lat_objeto* lat_instancia(lat_vm* vm)
        -:   99:{
        -:  100:    lat_objeto* ret = lat_crear_objeto(vm);
        1:  101:    ret->type = T_INSTANCE;
        1:  102:    ret->data_size = sizeof(hash_map*);
        1:  103:    ret->data.nombre = make_hash_map();
call    0 returned 100%
        1:  104:    return ret;
        -:  105:}
        -:  106:
function lat_literal_nuevo called 2 returned 100% blocks executed 100%
        2:  107:lat_objeto* lat_literal_nuevo(lat_vm* vm, const char* p)
        -:  108:{
        2:  109:    lat_objeto* ret = lat_cadena_hash(p, strlen(p));
call    0 returned 100%
        2:  110:    return ret;
        -:  111:}
        -:  112:
function lat_entero_nuevo called 20 returned 100% blocks executed 100%
       20:  113:lat_objeto* lat_entero_nuevo(lat_vm* vm, long val)
        -:  114:{
        -:  115:    lat_objeto* ret = lat_crear_objeto(vm);
       20:  116:    ret->type = T_INT;
       20:  117:    ret->data_size = sizeof(long);
       20:  118:    ret->data.i = val;
       20:  119:    return ret;
        -:  120:}
        -:  121:
function lat_decimal_nuevo called 20 returned 100% blocks executed 100%
       20:  122:lat_objeto* lat_decimal_nuevo(lat_vm* vm, double val)
        -:  123:{
        -:  124:    lat_objeto* ret = lat_crear_objeto(vm);
       20:  125:    ret->type = T_DOUBLE;
       20:  126:    ret->data_size = sizeof(double);
       20:  127:    ret->data.d = val;
       20:  128:    return ret;
        -:  129:}
        -:  130:
function lat_logico_nuevo called 2 returned 100% blocks executed 100%
        2:  131:lat_objeto* lat_logico_nuevo(lat_vm* vm, bool val)
        -:  132:{
        -:  133:    lat_objeto* ret = lat_crear_objeto(vm);
        2:  134:    ret->type = T_BOOL;
        2:  135:    ret->data_size = sizeof(bool);
        2:  136:    ret->data.b = val;
        2:  137:    return ret;
        -:  138:}
        -:  139:
function lat_cadena_nueva called 214 returned 100% blocks executed 100%
      214:  140:lat_objeto* lat_cadena_nueva(lat_vm* vm, const char* p)
        -:  141:{
      214:  142:    lat_objeto* ret = lat_cadena_hash(p, strlen(p));
call    0 returned 100%
      214:  143:    return ret;
        -:  144:}
        -:  145:
function lat_lista_nueva called 0 returned 0% blocks executed 0%
    #####:  146:lat_objeto* lat_lista_nueva(lat_vm* vm, list_node* l)
        -:  147:{
        -:  148:    lat_objeto* ret = lat_crear_objeto(vm);
    #####:  149:    ret->type = T_LIST;
    #####:  150:    ret->data_size = sizeof(list_node*);
    #####:  151:    ret->data.lista = l;
    #####:  152:    return ret;
        -:  153:}
        -:  154:
function lat_funcion_nueva called 4 returned 100% blocks executed 100%
        4:  155:lat_objeto* lat_funcion_nueva(lat_vm* vm)
        -:  156:{
        -:  157:    lat_objeto* ret = lat_crear_objeto(vm);
        4:  158:    ret->type = T_FUNC;
        -:  159:    ret->data_size = 0;
        4:  160:    return ret; //We don't do anything here: all bytecode will be added later
        -:  161:}
        -:  162:
function lat_cfuncion_nueva called 71 returned 100% blocks executed 100%
       71:  163:lat_objeto* lat_cfuncion_nueva(lat_vm* vm)
        -:  164:{
        -:  165:    lat_objeto* ret = lat_crear_objeto(vm);
       71:  166:    ret->type = T_CFUNC;
       71:  167:    return ret;
        -:  168:}
        -:  169:
function lat_marcar_objeto called 0 returned 0% blocks executed 0%
    #####:  170:void lat_marcar_objeto(lat_objeto* o, int m)
        -:  171:{
    #####:  172:    if (o != NULL)
branch  0 never executed
branch  1 never executed
        -:  173:    {
    #####:  174:        o->marked = m;
    #####:  175:        switch (o->type)
branch  0 never executed
branch  1 never executed
branch  2 never executed
        -:  176:        {
        -:  177:        case T_INSTANCE:
    #####:  178:            lat_marcar_hash(o->data.nombre, m);
call    0 never executed
    #####:  179:            break;
        -:  180:        case T_LIST:
    #####:  181:            lat_marcar_lista(o->data.lista, m);
call    0 never executed
    #####:  182:            break;
        -:  183:        default:
        -:  184:            break;
        -:  185:        }
        -:  186:    }
    #####:  187:}
        -:  188:
function lat_marcar_lista called 0 returned 0% blocks executed 0%
    #####:  189:void lat_marcar_lista(list_node* l, unsigned char m)
        -:  190:{
    #####:  191:    if (l != NULL)
branch  0 never executed
branch  1 never executed
        -:  192:    {
        -:  193:        list_node* c;
    #####:  194:        for (c = l->next; c != NULL; c = c->next)
branch  0 never executed
branch  1 never executed
        -:  195:        {
    #####:  196:            if (c->data != NULL)
branch  0 never executed
branch  1 never executed
        -:  197:            {
    #####:  198:                lat_marcar_objeto((lat_objeto*)c->data, m);
call    0 never executed
        -:  199:            }
        -:  200:        }
        -:  201:    }
    #####:  202:}
        -:  203:
function lat_marcar_hash called 0 returned 0% blocks executed 0%
    #####:  204:void lat_marcar_hash(hash_map* h, unsigned char m)
        -:  205:{
        -:  206:    int c = 0;
        -:  207:    list_node* l;
        -:  208:    list_node* cur;
        -:  209:    hash_val* hv;
    #####:  210:    for (c = 0; c < 256; ++c)
branch  0 never executed
branch  1 never executed
        -:  211:    {
    #####:  212:        l = h->buckets[c];
    #####:  213:        if (l != NULL)
branch  0 never executed
branch  1 never executed
        -:  214:        {
    #####:  215:            for (cur = l->next; cur != NULL; cur = cur->next)
branch  0 never executed
branch  1 never executed
        -:  216:            {
    #####:  217:                if (cur->data != NULL)
branch  0 never executed
branch  1 never executed
        -:  218:                {
        -:  219:                    hv = (hash_val*)cur->data;
    #####:  220:                    lat_marcar_objeto((lat_objeto*)hv->val, m);
call    0 never executed
        -:  221:                }
        -:  222:            }
        -:  223:        }
        -:  224:    }
    #####:  225:}
        -:  226:
function lat_eliminar_objeto called 4 returned 100% blocks executed 50%
        4:  227:void lat_eliminar_objeto(lat_vm* vm, lat_objeto* o)
        -:  228:{
        4:  229:    switch (o->type)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  230:    {
        -:  231:    case T_NULO:
        -:  232:        return;
        -:  233:        break;
        -:  234:    case T_INSTANCE:
        -:  235:        return;
        -:  236:        break;
        -:  237:    case T_LIST:
        -:  238:        //lat_eliminar_lista(vm, o->data.lista);
        -:  239:        break;
        -:  240:    case T_DICT:
        -:  241:        //lat_eliminar_lista(vm, o->data.lista);
        -:  242:        break;
        -:  243:    case T_LIT:
        -:  244:    case T_INT:
        -:  245:    case T_DOUBLE:
        -:  246:    case T_BOOL:
        -:  247:        break;
        -:  248:    case T_STR:
        -:  249:        return;
        -:  250:        break;
        -:  251:    case T_FUNC:
        -:  252:    case T_CFUNC:
        -:  253:        return;
        -:  254:    case T_STRUCT:
        -:  255:        return;
        -:  256:        break;
        -:  257:    }
    #####:  258:    lat_liberar_memoria(o);
call    0 never executed
        -:  259:}
        -:  260:
function lat_eliminar_lista called 0 returned 0% blocks executed 0%
    #####:  261:void lat_eliminar_lista(lat_vm* vm, list_node* l)
        -:  262:{
    #####:  263:    if (l != NULL)
branch  0 never executed
branch  1 never executed
        -:  264:    {
        -:  265:        list_node* c;
    #####:  266:        for (c = l->next; c != NULL; c = c->next)
branch  0 never executed
branch  1 never executed
        -:  267:        {
    #####:  268:            if (c->data != NULL)
branch  0 never executed
branch  1 never executed
        -:  269:            {
    #####:  270:                lat_eliminar_objeto(vm, (lat_objeto*)c->data);
call    0 never executed
        -:  271:            }
    #####:  272:            lat_liberar_memoria(c);
call    0 never executed
        -:  273:        }
        -:  274:    }
    #####:  275:    lat_liberar_memoria(l);
call    0 never executed
    #####:  276:}
        -:  277:
function lat_eliminar_hash called 0 returned 0% blocks executed 0%
    #####:  278:void lat_eliminar_hash(lat_vm* vm, hash_map* h)
        -:  279:{
        -:  280:    int c = 0;
        -:  281:    list_node* l;
        -:  282:    list_node* cur;
        -:  283:    hash_val* hv;
    #####:  284:    for (c = 0; c < 256; ++c)
branch  0 never executed
branch  1 never executed
        -:  285:    {
    #####:  286:        l = h->buckets[c];
    #####:  287:        if (l != NULL)
branch  0 never executed
branch  1 never executed
        -:  288:        {
    #####:  289:            for (cur = l->next; cur != NULL; cur = cur->next)
branch  0 never executed
branch  1 never executed
        -:  290:            {
    #####:  291:                if (cur != NULL)
branch  0 never executed
branch  1 never executed
        -:  292:                {
    #####:  293:                    if (cur->data != NULL)
branch  0 never executed
branch  1 never executed
        -:  294:                    {
        -:  295:                        hv = (hash_val*)cur->data;
    #####:  296:                        lat_eliminar_objeto(vm, (lat_objeto*)hv->val);
call    0 never executed
    #####:  297:                        lat_liberar_memoria(hv);
call    0 never executed
        -:  298:                    }
        -:  299:                    //lat_liberar_memoria(cur);
        -:  300:                }
        -:  301:            }
    #####:  302:            lat_liberar_memoria(l);
call    0 never executed
        -:  303:        }
        -:  304:    }
    #####:  305:}
        -:  306:
function lat_clonar_objeto called 30 returned 100% blocks executed 70%
       30:  307:lat_objeto* lat_clonar_objeto(lat_vm* vm, lat_objeto* obj)
        -:  308:{
        -:  309:    lat_objeto* ret;
       30:  310:    switch (obj->type)
branch  0 taken 13%
branch  1 taken 0%
branch  2 taken 87%
branch  3 taken 0%
        -:  311:    {
        -:  312:    case T_INSTANCE:
        -:  313:        ret = lat_crear_objeto(vm);
        4:  314:        ret->type = T_INSTANCE;
        4:  315:        ret->data_size = sizeof(hash_map*);
        -:  316:        //ret->data.nombre = lat_clonar_hash(vm, obj->data.nombre);
        4:  317:        ret->data.nombre = copy_hash(obj->data.nombre);
call    0 returned 100%
        -:  318:        //ret->data.nombre = obj->data.nombre;
        4:  319:        break;
        -:  320:    case T_LIST:
    #####:  321:        ret = lat_lista_nueva(vm, lat_clonar_lista(vm, obj->data.lista));
call    0 never executed
        -:  322:        //ret = lat_lista_nueva(vm, obj->data.lista);
    #####:  323:        break;
        -:  324:    case T_FUNC:
        -:  325:    case T_CFUNC:
        -:  326:        ret = obj;
        -:  327:        break;
        -:  328:    default:
        -:  329:        ret = lat_crear_objeto(vm);
       26:  330:        ret->type = obj->type;
       26:  331:        ret->marked = obj->marked;
       26:  332:        ret->data_size = obj->data_size;
       26:  333:        ret->data = obj->data;
       26:  334:        break;
        -:  335:    }
       30:  336:    return ret;
        -:  337:}
        -:  338:
function lat_clonar_lista called 0 returned 0% blocks executed 0%
    #####:  339:list_node* lat_clonar_lista(lat_vm* vm, list_node* l)
        -:  340:{
    #####:  341:    list_node* ret = lat_crear_lista();
call    0 never executed
    #####:  342:    if (l != NULL)
branch  0 never executed
branch  1 never executed
        -:  343:    {
        -:  344:        list_node* c;
    #####:  345:        for (c = l->next; c != NULL; c = c->next)
branch  0 never executed
branch  1 never executed
        -:  346:        {
    #####:  347:            if (c->data != NULL)
branch  0 never executed
branch  1 never executed
        -:  348:            {
    #####:  349:                insert_list(ret, lat_clonar_objeto(vm, (lat_objeto*)c->data));
call    0 never executed
call    1 never executed
        -:  350:            }
        -:  351:        }
        -:  352:    }
    #####:  353:    return ret;
        -:  354:}
        -:  355:
function lat_clonar_hash called 0 returned 0% blocks executed 0%
    #####:  356:hash_map* lat_clonar_hash(lat_vm* vm, hash_map* h)
        -:  357:{
        -:  358:    int c = 0;
    #####:  359:    hash_map* ret = make_hash_map();
call    0 never executed
        -:  360:    list_node* l;
    #####:  361:    for (c = 0; c < 256; ++c)
branch  0 never executed
branch  1 never executed
        -:  362:    {
    #####:  363:        l = h->buckets[c];
    #####:  364:        if (l != NULL)
branch  0 never executed
branch  1 never executed
        -:  365:        {
    #####:  366:            ret->buckets[c] = lat_crear_lista();
call    0 never executed
    #####:  367:            if (l != NULL)
branch  0 never executed
branch  1 never executed
        -:  368:            {
        -:  369:                list_node* cur;
    #####:  370:                for (cur = l->next; cur != NULL; cur = cur->next)
branch  0 never executed
branch  1 never executed
        -:  371:                {
    #####:  372:                    if (cur->data != NULL)
branch  0 never executed
branch  1 never executed
        -:  373:                    {
    #####:  374:                        hash_val* hv = (hash_val*)lat_asignar_memoria(sizeof(hash_val));                        
call    0 never executed
    #####:  375:                        strncpy(hv->key, ((hash_val*)cur->data)->key, 256);
    #####:  376:                        hv->val = lat_clonar_objeto(vm, (lat_objeto*)((hash_val*)cur->data)->val);
call    0 never executed
    #####:  377:                        insert_list(ret->buckets[c], hv);
call    0 never executed
        -:  378:                    }
        -:  379:                }
        -:  380:            }
        -:  381:        }
        -:  382:    }
    #####:  383:    return ret;
        -:  384:}
        -:  385:
function lat_obtener_literal called 0 returned 0% blocks executed 0%
    #####:  386:char* lat_obtener_literal(lat_objeto* o)
        -:  387:{
    #####:  388:    if (o->type == T_LIT || o->type == T_STR)
branch  0 never executed
branch  1 never executed
        -:  389:    {
    #####:  390:        return o->data.c;
        -:  391:    }
    #####:  392:    lat_registrar_error("Object no es un tipo caracter");
call    0 never executed
    #####:  393:    return 0;
        -:  394:}
        -:  395:
function lat_obtener_entero called 31 returned 100% blocks executed 43%
       31:  396:long lat_obtener_entero(lat_objeto* o)
        -:  397:{
       31:  398:    if (o->type == T_INT)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  399:    {
       31:  400:        return o->data.i;
        -:  401:    }
    #####:  402:    if (o->type == T_DOUBLE)
branch  0 never executed
branch  1 never executed
        -:  403:    {
    #####:  404:        return (long)o->data.d;
        -:  405:    }
    #####:  406:    lat_registrar_error("Object no es un tipo entero");
call    0 never executed
    #####:  407:    return 0;
        -:  408:}
        -:  409:
function lat_obtener_decimal called 66 returned 100% blocks executed 71%
       66:  410:double lat_obtener_decimal(lat_objeto* o)
        -:  411:{
       66:  412:    if (o->type == T_DOUBLE)
branch  0 taken 47% (fallthrough)
branch  1 taken 53%
        -:  413:    {
       31:  414:        return o->data.d;
        -:  415:    }
       35:  416:    else if (o->type == T_INT)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  417:    {
       35:  418:        return (double)o->data.i;
        -:  419:    }
    #####:  420:    lat_registrar_error("Object no es un tipo numerico");
call    0 never executed
    #####:  421:    return 0;
        -:  422:}
        -:  423:
function lat_obtener_cadena called 259 returned 100% blocks executed 60%
      259:  424:char* lat_obtener_cadena(lat_objeto* o)
        -:  425:{
      259:  426:    if (o->type == T_STR)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  427:    {
      259:  428:        return o->data.str;
        -:  429:    }
    #####:  430:    lat_registrar_error("Object no es un tipo cadena");
call    0 never executed
    #####:  431:    return 0;
        -:  432:}
        -:  433:
function lat_obtener_logico called 31 returned 100% blocks executed 43%
       31:  434:bool lat_obtener_logico(lat_objeto* o)
        -:  435:{
       31:  436:    if (o->type == T_BOOL)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  437:    {
       31:  438:        return o->data.b;
        -:  439:    }
    #####:  440:    if (o->type == T_INT)
branch  0 never executed
branch  1 never executed
        -:  441:    {
    #####:  442:        return o->data.i;
        -:  443:    }
    #####:  444:    lat_registrar_error("Object no es un tipo logico");
call    0 never executed
    #####:  445:    return false;
        -:  446:}
        -:  447:
function lat_obtener_lista called 0 returned 0% blocks executed 0%
    #####:  448:list_node* lat_obtener_lista(lat_objeto* o)
        -:  449:{
    #####:  450:    if (o->type == T_LIST)
branch  0 never executed
branch  1 never executed
        -:  451:    {
    #####:  452:        return o->data.lista;
        -:  453:    }
    #####:  454:    lat_registrar_error("Object no es un tipo lista");
call    0 never executed
    #####:  455:    return NULL;
        -:  456:}
