        -:    0:Source:/home/latino/src/latino/src/latino.c
        -:    0:Programs:13
        -:    1:/*
        -:    2:The MIT License (MIT)
        -:    3:Copyright (c) 2015 - Latino
        -:    4:Permission is hereby granted, free of charge, to any person obtaining a copy
        -:    5:of this software and associated documentation files (the "Software"), to deal
        -:    6:in the Software without restriction, including without limitation the rights
        -:    7:to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
        -:    8:copies of the Software, and to permit persons to whom the Software is
        -:    9:furnished to do so, subject to the following conditions:
        -:   10:The above copyright notice and this permission notice shall be included in
        -:   11:all copies or substantial portions of the Software.
        -:   12:THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        -:   13:IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
        -:   14:FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
        -:   15:AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
        -:   16:LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
        -:   17:OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
        -:   18:THE SOFTWARE.
        -:   19:*/
        -:   20:
        -:   21:#include <stdio.h>
        -:   22:#include <stdlib.h>
        -:   23:#include <string.h>
        -:   24:#include <locale.h>
        -:   25:
        -:   26:#include "linenoise/linenoise.h"
        -:   27:#include "latino.h"
        -:   28:#include "parse.h"
        -:   29:#include "lex.h"
        -:   30:#include "ast.h"
        -:   31:#include "libmem.h"
        -:   32:
        -:   33:/* 1 para debuguear analizador */
        -:   34:int yydebug = 0;
        -:   35:int parse_silent;
        -:   36:static FILE *file;
        -:   37:static char *buffer;
        -:   38:
        -:   39:int yyparse(ast **root, yyscan_t scanner);
        -:   40:
function lat_analizar_expresion called 1 returned 100% blocks executed 100%
        1:   41:ast *lat_analizar_expresion(lat_vm* vm, char* expr, int* status)
        -:   42:{
        1:   43:    setlocale (LC_ALL, "");
call    0 returned 100%
        1:   44:    ast *ret = NULL;
        -:   45:    yyscan_t scanner;
        -:   46:    YY_BUFFER_STATE state;
        1:   47:    lex_state scan_state = {.insert = 0};
        1:   48:    yylex_init_extra(&scan_state, &scanner);
call    0 returned 100%
        1:   49:    state = yy_scan_string(expr, scanner);
call    0 returned 100%
        1:   50:    *status = yyparse(&ret, scanner);
call    0 returned 100%
        1:   51:    yy_delete_buffer(state, scanner);
call    0 returned 100%
        1:   52:    yylex_destroy(scanner);
call    0 returned 100%
        1:   53:    return ret;
        -:   54:}
        -:   55:
function lat_analizar_archivo called 1 returned 100% blocks executed 68%
        1:   56:ast *lat_analizar_archivo(lat_vm* vm, char *infile)
        -:   57:{
        1:   58:    if (infile == NULL)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:   59:    {
    #####:   60:        printf("Especifique un archivo\n");
call    0 never executed
    #####:   61:        return NULL;
        -:   62:    }
        1:   63:    char *dot = strrchr(infile, '.');
        -:   64:    char *extension;
        1:   65:    if (!dot || dot == infile)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   66:    {
        -:   67:        extension = "";
        -:   68:    }
        -:   69:    else
        -:   70:    {
        1:   71:        extension = dot + 1;
        -:   72:    }
        1:   73:    if (strcmp(extension, "lat") != 0)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
        -:   74:    {
    #####:   75:        printf("El archivo no contiene la extension .lat\n");
call    0 never executed
    #####:   76:        return NULL;
        -:   77:    }
        1:   78:    file = fopen(infile, "r");
call    0 returned 100%
        1:   79:    if (file == NULL)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:   80:    {
    #####:   81:        printf("No se pudo abrir el archivo\n");
call    0 never executed
    #####:   82:        return NULL;
        -:   83:    }
        1:   84:    fseek(file, 0, SEEK_END);
call    0 returned 100%
        1:   85:    int fsize = ftell(file);
call    0 returned 100%
        1:   86:    fseek(file, 0, SEEK_SET);
call    0 returned 100%
        1:   87:    buffer = calloc(fsize+1, 1);
        1:   88:    size_t newSize = fread(buffer, sizeof(char), fsize, file);
call    0 returned 100%
        1:   89:    if (buffer == NULL)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:   90:    {
    #####:   91:        printf("No se pudo asignar %d bytes de memoria\n", fsize);
call    0 never executed
    #####:   92:        return NULL;
        -:   93:    }
        1:   94:    buffer[newSize] = '\0';
        -:   95:    int status;
        1:   96:    return lat_analizar_expresion(vm, buffer, &status);
call    0 returned 100%
        -:   97:}
        -:   98:/**
        -:   99: * Muestra la version de latino en la consola
        -:  100: */
function lat_version called 0 returned 0% blocks executed 0%
    #####:  101:void lat_version()
        -:  102:{
    #####:  103:    printf("%s\n", LAT_DERECHOS);
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
    #####:  104:}
        -:  105:/**
        -:  106: * Para crear el logo en ascii
        -:  107: */
function lat_logo called 0 returned 0% blocks executed 0%
    #####:  108:void lat_logo()
        -:  109:{
    #####:  110:    printf("%s\n", LAT_LOGO);
call    0 never executed
call    1 never executed
    #####:  111:}
        -:  112:
        -:  113:/**
        -:  114: * Muestra la ayuda en la consola
        -:  115: */
function lat_ayuda called 0 returned 0% blocks executed 0%
    #####:  116:void lat_ayuda()
        -:  117:{
        -:  118:    lat_logo();
        -:  119:    lat_version();
    #####:  120:    printf("%s\n", "Uso de latino: latino [opcion] [archivo]");
call    0 never executed
    #####:  121:    printf("\n");
call    0 never executed
    #####:  122:    printf("%s\n", "Opciones:");
call    0 never executed
    #####:  123:    printf("%s\n", "-a           : Muestra la ayuda de Latino");
call    0 never executed
    #####:  124:    printf("%s\n", "-i           : Inicia el interprete de Latino (Modo interactivo)");
call    0 never executed
    #####:  125:    printf("%s\n", "-v           : Muestra la version de Latino");
call    0 never executed
    #####:  126:    printf("%s\n", "archivo      : Nombre del archivo con extension .lat");
call    0 never executed
    #####:  127:    printf("%s\n", "Ctrl-C       : Para cerrar");
call    0 never executed
    #####:  128:    printf("\n");
call    0 never executed
    #####:  129:    printf("%s\n", "Variables de entorno:");
call    0 never executed
    #####:  130:    printf("%s\n", "_____________________");
call    0 never executed
    #####:  131:    printf("%s%s\n", "LATINO_PATH  : ", getenv("LATINO_PATH"));
call    0 never executed
call    1 never executed
    #####:  132:    printf("%s%s\n", "LATINO_LIB   : ", getenv("LATINO_LIB"));
call    0 never executed
call    1 never executed
    #####:  133:    printf("%s%s\n", "LC_LANG      : ", getenv("LC_LANG"));
call    0 never executed
call    1 never executed
    #####:  134:    printf("%s%s\n", "HOME         : ", getenv("HOME"));
call    0 never executed
call    1 never executed
    #####:  135:}
        -:  136:
function leer_linea called 0 returned 0% blocks executed 0%
    #####:  137:static int leer_linea(lat_vm *vm, char* buffer){
    #####:  138:    parse_silent = 1;
        -:  139:    int resultado;
        -:  140:    char *input;
        -:  141:    //buffer = lat_asignar_memoria(MAX_STR_LENGTH);
        -:  142:    char *tmp = "";
        -:  143:    REPETIR:
    #####:  144:    input = linenoise("latino> ");
call    0 never executed
    #####:  145:    if(input == NULL){
branch  0 never executed
branch  1 never executed
        -:  146:        return -1;
        -:  147:    }
        -:  148:    for(;;){
    #####:  149:        tmp = concat(tmp, "\n");
call    0 never executed
    #####:  150:        tmp = concat(tmp, input);
call    0 never executed
        -:  151:        int estatus;
    #####:  152:        lat_analizar_expresion(vm, tmp, &estatus);
call    0 never executed
    #####:  153:        if(estatus == 1){
branch  0 never executed
branch  1 never executed
        -:  154:            goto REPETIR;
        -:  155:        }else{
    #####:  156:            strcpy(buffer, tmp);
    #####:  157:            return 0;
        -:  158:        }
        -:  159:    }
        -:  160:    return resultado;
        -:  161:}
        -:  162:
function completion called 0 returned 0% blocks executed 0%
    #####:  163:static void completion(const char *buf, linenoiseCompletions *lc) {
    #####:  164:    if (startsWith(buf, "esc")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  165:        linenoiseAddCompletion(lc,"escribir");
call    0 never executed
        -:  166:    }
    #####:  167:    if (startsWith(buf, "imp")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  168:        linenoiseAddCompletion(lc,"imprimir");
call    0 never executed
        -:  169:    }
    #####:  170:    if (startsWith(buf, "eje")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  171:        linenoiseAddCompletion(lc,"ejecutar");
call    0 never executed
        -:  172:    }
    #####:  173:    if (startsWith(buf, "ejea")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  174:        linenoiseAddCompletion(lc,"ejecutar_archivo");
call    0 never executed
        -:  175:    }
    #####:  176:    if (startsWith(buf, "fun")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  177:        linenoiseAddCompletion(lc,"funcion");
call    0 never executed
        -:  178:    }
    #####:  179:    if (startsWith(buf, "com")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  180:        linenoiseAddCompletion(lc,"comparar");
call    0 never executed
        -:  181:    }
    #####:  182:    if (startsWith(buf, "con")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  183:        linenoiseAddCompletion(lc,"concatenar");
call    0 never executed
        -:  184:    }
    #####:  185:    if (startsWith(buf, "cont")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  186:        linenoiseAddCompletion(lc,"contiene");
call    0 never executed
        -:  187:    }
    #####:  188:    if (startsWith(buf, "cop")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  189:        linenoiseAddCompletion(lc,"copiar");
call    0 never executed
        -:  190:    }
    #####:  191:    if (startsWith(buf, "ter")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  192:        linenoiseAddCompletion(lc,"termina_con");
call    0 never executed
        -:  193:    }
    #####:  194:    if (startsWith(buf, "es_")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  195:        linenoiseAddCompletion(lc,"es_igual");
call    0 never executed
        -:  196:    }
    #####:  197:    if (startsWith(buf, "ind")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  198:        linenoiseAddCompletion(lc,"indice");
call    0 never executed
        -:  199:    }
    #####:  200:    if (startsWith(buf, "ins")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  201:        linenoiseAddCompletion(lc,"insertar");
call    0 never executed
        -:  202:    }
    #####:  203:    if (startsWith(buf, "ult")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  204:        linenoiseAddCompletion(lc,"ultimo_indice");
call    0 never executed
        -:  205:    }
    #####:  206:    if (startsWith(buf, "reli")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  207:        linenoiseAddCompletion(lc,"rellenar_izquierda");
call    0 never executed
        -:  208:    }
    #####:  209:    if (startsWith(buf, "reld")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  210:        linenoiseAddCompletion(lc,"rellenar_derecha");
call    0 never executed
        -:  211:    }
    #####:  212:    if (startsWith(buf, "eli")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  213:        linenoiseAddCompletion(lc,"eliminar");
call    0 never executed
        -:  214:    }
    #####:  215:    if (startsWith(buf, "est")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  216:        linenoiseAddCompletion(lc,"esta_vacia");
call    0 never executed
        -:  217:    }
    #####:  218:    if (startsWith(buf, "lon")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  219:        linenoiseAddCompletion(lc,"longitud");
call    0 never executed
        -:  220:    }
    #####:  221:    if (startsWith(buf, "ree")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  222:        linenoiseAddCompletion(lc,"reemplazar");
call    0 never executed
        -:  223:    }
    #####:  224:    if (startsWith(buf, "emp")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  225:        linenoiseAddCompletion(lc,"empieza_con");
call    0 never executed
        -:  226:    }
    #####:  227:    if (startsWith(buf, "sub")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  228:        linenoiseAddCompletion(lc,"subcadena");
call    0 never executed
        -:  229:    }
    #####:  230:    if (startsWith(buf, "min")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  231:        linenoiseAddCompletion(lc,"minusculas");
call    0 never executed
        -:  232:    }
    #####:  233:    if (startsWith(buf, "may")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  234:        linenoiseAddCompletion(lc,"mayusculas");
call    0 never executed
        -:  235:    }
    #####:  236:    if (startsWith(buf, "qui")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  237:        linenoiseAddCompletion(lc,"quitar_espacios");
call    0 never executed
        -:  238:    }
    #####:  239:    if (startsWith(buf, "lee")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  240:        linenoiseAddCompletion(lc,"leer");
call    0 never executed
        -:  241:    }
    #####:  242:    if (startsWith(buf, "esca")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  243:        linenoiseAddCompletion(lc,"escribir_archivo");
call    0 never executed
        -:  244:    }
    #####:  245:    if (startsWith(buf, "tip")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  246:        linenoiseAddCompletion(lc,"tipo");
call    0 never executed
        -:  247:    }
    #####:  248:    if (startsWith(buf, "log")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  249:        linenoiseAddCompletion(lc,"logico");
call    0 never executed
        -:  250:    }
    #####:  251:    if (startsWith(buf, "ent")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  252:        linenoiseAddCompletion(lc,"entero");
call    0 never executed
        -:  253:    }
    #####:  254:    if (startsWith(buf, "dec")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  255:        linenoiseAddCompletion(lc,"decimal");
call    0 never executed
        -:  256:    }
    #####:  257:    if (startsWith(buf, "cad")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  258:        linenoiseAddCompletion(lc,"cadena");
call    0 never executed
        -:  259:    }
    #####:  260:    if (startsWith(buf, "sal")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  261:        linenoiseAddCompletion(lc,"salir");
call    0 never executed
        -:  262:    }
    #####:  263:}
        -:  264:
        -:  265:/*static char *hints(const char *buf, int *color, int *bold) {
        -:  266:    if (!strcasecmp(buf,"escribir")) {
        -:  267:        *color = 35;
        -:  268:        *bold = 0;
        -:  269:        return " Hola Latinos";
        -:  270:    }
        -:  271:    return NULL;
        -:  272:}*/
        -:  273:
function lat_repl called 0 returned 0% blocks executed 0%
    #####:  274:static void lat_repl(lat_vm *vm)
        -:  275:{
    #####:  276:    char* buf = lat_asignar_memoria(MAX_STR_INTERN);
call    0 never executed
        -:  277:    ast* tmp = NULL;
        -:  278:    int status;
    #####:  279:    vm->REPL = true;
        -:  280:    //linenoiseSetMultiLine(1);
    #####:  281:    linenoiseHistoryLoad("history.txt");
call    0 never executed
    #####:  282:    linenoiseSetCompletionCallback(completion);
call    0 never executed
        -:  283:    //linenoiseSetHintsCallback(hints);
    #####:  284:    while (leer_linea(vm, buf) != -1)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  285:    {
    #####:  286:        parse_silent = 0;
    #####:  287:        tmp = lat_analizar_expresion(vm, buf, &status);
call    0 never executed
    #####:  288:        if(tmp != NULL)
branch  0 never executed
branch  1 never executed
        -:  289:        {
    #####:  290:            lat_objeto *curexpr = nodo_analizar_arbol(vm, tmp);
call    0 never executed
    #####:  291:            lat_llamar_funcion(vm, curexpr);
call    0 never executed
    #####:  292:            if(vm->registros[255] != NULL && (strstr(buf, "escribir") == NULL && strstr(buf, "imprimir") == NULL)){
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  293:                lat_apilar(vm, vm->registros[255]);
call    0 never executed
    #####:  294:                lat_imprimir(vm);
call    0 never executed
        -:  295:            }
    #####:  296:            linenoiseHistoryAdd(replace(buf, "\n", ""));
call    0 never executed
call    1 never executed
    #####:  297:            linenoiseHistorySave("history.txt");
call    0 never executed
        -:  298:        }
        -:  299:    }
    #####:  300:    lat_liberar_memoria(buf);
call    0 never executed
    #####:  301:}
        -:  302:
function main called 1 returned 100% blocks executed 56%
        1:  303:int main(int argc, char *argv[])
        -:  304:{
        -:  305:    /*
        -:  306:    Para debuguear en visual studio:
        -:  307:    Menu propiedades del proyecto-> Debugging -> Command Arguments. Agregar
        -:  308:    $(SolutionDir)..\ejemplos\debug.lat
        -:  309:    */
        -:  310:
        -:  311:    int i;
        -:  312:    char *infile = NULL;
        1:  313:    lat_vm *vm = lat_crear_maquina_virtual();
call    0 returned 100%
        2:  314:    for (i = 1; i < argc; i++)
branch  0 taken 50%
branch  1 taken 50% (fallthrough)
        -:  315:    {
        1:  316:        if (strcmp(argv[i], "-v") == 0)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
        -:  317:        {
        -:  318:            lat_version();
    #####:  319:            return EXIT_SUCCESS;
        -:  320:        }
        1:  321:        else if (strcmp(argv[i], "-a") == 0)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
        -:  322:        {
    #####:  323:            lat_ayuda();
call    0 never executed
    #####:  324:            return EXIT_SUCCESS;
        -:  325:        }
        1:  326:        else if (strcmp(argv[i], "-i") == 0)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
        -:  327:        {
        -:  328:            lat_version();
    #####:  329:            lat_repl(vm);
call    0 never executed
    #####:  330:            return EXIT_SUCCESS;
        -:  331:        }
        -:  332:        else
        -:  333:        {
        -:  334:            infile = argv[i];
        -:  335:        }
        -:  336:    }
        1:  337:    if(argc > 1 && infile != NULL)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  338:    {
        1:  339:        vm->REPL = false;
        1:  340:        ast *tree = lat_analizar_archivo(vm, infile);
call    0 returned 100%
        1:  341:        if (!tree)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  342:        {
        -:  343:            return EXIT_FAILURE;
        -:  344:        }
        1:  345:        lat_objeto *mainFunc = nodo_analizar_arbol(vm, tree);
call    0 returned 100%
        1:  346:        lat_llamar_funcion(vm, mainFunc);
call    0 returned 100%
        1:  347:        lat_apilar(vm, vm->registros[255]);
call    0 returned 100%
        1:  348:        if(file != NULL)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  349:        {
        1:  350:            fclose(file);
call    0 returned 100%
        -:  351:        }
        -:  352:    }
        -:  353:    else
        -:  354:    {
        -:  355:#ifdef _WIN32
        -:  356:        system("cmd");
        -:  357:        //lat_version();
        -:  358:        //lat_repl(vm);
        -:  359:#else
        -:  360:        lat_version();
    #####:  361:        lat_repl(vm);
call    0 never executed
        -:  362:#endif
        -:  363:    }
        -:  364:
        -:  365:    return EXIT_SUCCESS;
        -:  366:}
