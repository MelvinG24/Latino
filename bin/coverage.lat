funcion x()
   retornar "nk", 2
fin
a = x() // vale 2, es el error, debería valer "nk"
poner(a)

funcion retor(arg1, ...)
    poner("latino")
    imprimirf(arg1, ...)
    f = cadena.formato("%s", ...)
    poner("cadena.formato: " .. f)
    m = [10, 20]
    poner("m: " .. m)
    l = [...] //, "a", "b", "c", ...
    poner("l : " .. l)
    retornar m[0], m[1], {"m": "b"}, [1,2,3], "j"//, ...
fin

a,b,c,d = retor("%s : %i\n", "b", 1, 2, 3)

poner("a: " .. a)
poner("b: " .. b)
poner("c: " .. c)
poner("d: " .. d)
poner("A:"..a.."\tB: "..b)
poner("DIC: "..d[1])

str = "hola mundo"
imprimirf("%s %s\n", "hola", "mundo")

fun m(...)
    a = [...]
    poner(a)
fin

m("jn", "jnj", "jnj")

fun m(...)
    a = [...]
    poner(tipo(a))
fin

m("jn", "jnj", "jnj")

fun m(...)
    desde (i=0; i<[...]; i++)
        poner(i)
    fin
fin

m("jn", "jnj", "jnj")

fun m(a)
    si a == 1
        retornar verdadero, "está bien"
    fin
    retornar falso, "está mal"
fin

v,m = m("jn")
poner(m)

fun m(a)
    si a == 1
        retornar verdadero, "está bien"
    fin
    retornar falso, "está mal"
fin

v = m("jn")
poner(v)


//----
a = 10
b = falso
c = nulo
d = "hola mundo"

si b
	poner("v")
sino
	poner("f")
fin

b = verdadero
si b
	poner("v")
sino
	poner("f")
fin

elegir(a)
	caso 1:
		poner("a vale 1")
	caso 10:
		poner("a vale 10")
	defecto:
		poner("a NO vale ni 1 ni 10")
fin

mientras a > 0
	poner(a)
	a--
fin

global i = 0
repetir
    poner(i)
    i++
hasta (i >= 10)

a=10
desde(i=0; i < a; i++)
	poner(i)
fin

funcion operacion(op, a, b)
	elegir(op)
	caso "+":
		retorno a+b
	caso "-":
		retorno a-b
	caso "*":
		retorno a*b
	caso "/":
		retorno a/b
	caso "%":
		retorno a%b
	caso ">":
		retorno a>b
	caso ">=":
		retorno a>=b
	caso "<":
		retorno a<b
	caso "<=":
		retorno a<=b
	caso "==":
		retorno a==b
	caso "!=":
		retorno a!=b
	caso "~=":
		retorno a~=b
	caso "&&":
		retorno a&&b
	caso "||":
		retorno a||b
	caso "!":
		retorno !a
	caso "..":
		retorno a..b
	fin
fin

poner(operacion("~=", "hola mundo", "^hola"))
poner(operacion("+", 1, 2))
poner(operacion("-", 1, 2))
poner(operacion("*", 1, 2))
poner(operacion("/", 1, 2))
poner(operacion("%", 1, 2))
poner(operacion(">", 1, 2))
poner(operacion(">=", 1, 2))
poner(operacion("<", 1, 2))
poner(operacion("<=", 1, 2))
poner(operacion("==", 1, 2))
poner(operacion("==", 2, "2"))
poner(operacion("!=", 1, 2))
poner(operacion("!=", 2, "2"))
poner(operacion("!=", "1", "2"))
poner(operacion("~=", "hola mundo", "^hola"))
poner(operacion("&&", 1, 1))
poner(operacion("||", 1, 0))
poner(operacion("!", 1, nulo))
poner(operacion("..", "hola", "mundo"))

funcion fibo_rec(n)
    si ( n < 2 )
        retorno n
    fin
    retorno fibo_rec(n-1) + fibo_rec(n-2)
fin

poner("fibo_rec: " .. fibo_rec(10))
a=10
g = -(a)
poner(a)
poner(g)

e = [1, 2, 3]
poner(e)

e[0] = "a"
poner(e)
h = lista.invertir(e)
lista.agregar(e, 4)
lista.extender(e, h)
lista.eliminar_indice(e, 0)
poner(lista.longitud(e))
j = lista.indice(e, 1)

poner(lista.comparar(h, e))
poner(lista.comparar(e, e))
poner(lista.comparar(e, h))

lista.insertar(e, 0, 0)
lista.eliminar(e, 0)
lista.eliminar(e, e[lista.longitud(e)-1])
poner(lista.contiene(e, 3))
poner(lista.contiene(e, 99))

poner(e)
poner(h)
poner(h[0])

k = []
lista.agregar(k, 1)
lista.agregar(k, "hola")
lista.insertar(k, "mundo", 2)
lista.insertar(k, "-", 1)
lista.eliminar_indice(e, 4)

f = {"uno" :  1, "dos" : 2, "tres" : 3, "cinco" : "5", "seis": [1,2,3,4,5,6]}
f.uno = 10
poner(f.cuatro)
poner(dic.longitud(f))
poner(f.seis[0])

str = "hola mundo"
//poner(str[0])
imprimirf("%s %s\n", "hola", "mundo")
//str = "hola mundo"
//poner(str ~= "^hola")
si str ~= "^hola"
    poner("es velda")
    //error("que paso ayer!")
fin
poner("fin...")
