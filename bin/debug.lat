funcion fibo_iter(n)
    si ( n < 2 )
        retorno n
    fin
    prevPrev = 0
    prev = 1
    res = 0
    i = 2
    mientras( i <= n)
        res = prev + prevPrev
        prevPrev = prev
        prev = res
        i = i + 1
    fin
    retorno res
fin
res = "fibo_iter: "
res ..= fibo_iter(8)
poner(res)
/*
funcion fibo_rec(n)
    si ( n < 2 )
        retorno n
    fin
    retorno fibo_rec(n-1) + fibo_rec(n-2)
fin

poner(fibo_rec(6))


fun fret (a, b)
  ret a+b
fin
fun fnoret(a,b)
  x=a+b
fin
fun fmultiret(a,b)
  ret a, b
fin
//fret(1,2)   //LOAD_CONST      1
//val = fret(1,2)   //ADJUST_STACK      1 -> STORE_NAME val
//val1, val2 = fret(1,2)  //ADJUST_STACK    2 ->  STORE_NAME val2 -> STORE_NAME val1
//poner(val1)
//poner(val2)
fmultiret(1,2)
poner(fmultiret(1,2))
poner(fnoret(1,2))   //aqui regresa el 3 <-resultado de fret
poner(fnoret(1,2))   //aqui manda error porque no hay valores en la pila
*/
/*
//una funcion varargs se crea con ... en su ultimo parametro
funcion mi_concatenar(arg1, arg2, ...)
    //obtenemos los parametros varargs
    args = [...]
    //concatenamos los primeros 2 argumentos
    r= arg1 .. arg2
    desde (i=0; i < args; i++)
        r = r .. args[i]
    fin
    retornar r
fin
//enviamos N parametros
msg = mi_concatenar("hola ", "mundo ", "este ", "es ", "un ", "mensaje ", "largo...")
escribir(msg)   //imprime: "hola mundo este es un mensaje largo..."

//otro ejemplo
funcion sumar(...)
    args = [...]
    r=0
    desde (i=0; i < args; i++)
        r = r + args[i]
    fin
    retornar r
fin
x = sumar(1,2,3,4,5)
imprimir(x)     //imprime: "15"

//una funcion multi-retorno es aquella que regresa N parametros
funcion multi_retorno(msg)
    #proceso el mensaje
    //mas codigo
    //regreso un valor exitoso y un mensaje, puede retornar mas mensajes
    retornar verdadero, "el mensaje se envio correctamente"
fin

//asignacion multiple de variables
correcto, mensaje = multi_retorno("hola amigos")

si correcto
    //imprime: "el mensaje se envio correctamente"
    escribir(mensaje)
fin
*/
