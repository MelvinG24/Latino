        -:    0:Source:/home/latino/src/latino/src/vm.c
        -:    0:Programs:13
        -:    1:/*
        -:    2:The MIT License (MIT)
        -:    3:
        -:    4:Copyright (c) 2015 - Latino
        -:    5:
        -:    6:Permission is hereby granted, free of charge, to any person obtaining a copy
        -:    7:of this software and associated documentation files (the "Software"), to deal
        -:    8:in the Software without restriction, including without limitation the rights
        -:    9:to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
        -:   10:copies of the Software, and to permit persons to whom the Software is
        -:   11:furnished to do so, subject to the following conditions:
        -:   12:
        -:   13:The above copyright notice and this permission notice shall be included in
        -:   14:all copies or substantial portions of the Software.
        -:   15:
        -:   16:THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        -:   17:IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
        -:   18:FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
        -:   19:AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
        -:   20:LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
        -:   21:OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
        -:   22:THE SOFTWARE.
        -:   23:*/
        -:   24:#include <stdlib.h>
        -:   25:#include <stddef.h>
        -:   26:#include <stdio.h>
        -:   27:
        -:   28:#include "vm.h"
        -:   29:#include "utils.h"
        -:   30:#include "libmem.h"
        -:   31:#include "libmath.h"
        -:   32:#include "libstring.h"
        -:   33:#include "libio.h"
        -:   34:#include "liblist.h"
        -:   35:
function lat_crear_maquina_virtual called 1 returned 100% blocks executed 100%
        1:   36:lat_vm* lat_crear_maquina_virtual()
        -:   37:{
        1:   38:    lat_vm* ret = (lat_vm*)lat_asignar_memoria(sizeof(lat_vm));
call    0 returned 100%
        1:   39:    ret->pila = lat_crear_lista();
call    0 returned 100%
        1:   40:    ret->todos_objetos = lat_crear_lista();
call    0 returned 100%
        1:   41:    ret->basurero_objetos = lat_crear_lista();
call    0 returned 100%
        1:   42:    ret->modulos = lat_crear_lista();
call    0 returned 100%
        1:   43:    ret->memoria_usada = 0;
        1:   44:    ret->objeto_cierto = lat_logico_nuevo(ret, true);
call    0 returned 100%
        1:   45:    ret->objeto_falso = lat_logico_nuevo(ret, false);
call    0 returned 100%
        1:   46:    memset(ret->registros, 0, 256);
        1:   47:    memset(ret->contexto_pila, 0, 256);
        1:   48:    ret->contexto_pila[0] = lat_instancia(ret);
call    0 returned 100%
        1:   49:    ret->apuntador_pila = 0;
        2:   50:    lat_asignar_contexto_objeto(lat_obtener_contexto(ret), lat_cadena_nueva(ret, "+"), lat_definir_cfuncion(ret, lat_sumar));
call    0 returned 100%
call    1 returned 100%
        2:   51:    lat_asignar_contexto_objeto(lat_obtener_contexto(ret), lat_cadena_nueva(ret, "-"), lat_definir_cfuncion(ret, lat_restar));
call    0 returned 100%
call    1 returned 100%
        2:   52:    lat_asignar_contexto_objeto(lat_obtener_contexto(ret), lat_cadena_nueva(ret, "*"), lat_definir_cfuncion(ret, lat_multiplicar));
call    0 returned 100%
call    1 returned 100%
        2:   53:    lat_asignar_contexto_objeto(lat_obtener_contexto(ret), lat_cadena_nueva(ret, "/"), lat_definir_cfuncion(ret, lat_dividir));
call    0 returned 100%
call    1 returned 100%
        2:   54:    lat_asignar_contexto_objeto(lat_obtener_contexto(ret), lat_cadena_nueva(ret, "%"), lat_definir_cfuncion(ret, lat_modulo));
call    0 returned 100%
call    1 returned 100%
        2:   55:    lat_asignar_contexto_objeto(lat_obtener_contexto(ret), lat_cadena_nueva(ret, "!="), lat_definir_cfuncion(ret, lat_diferente));
call    0 returned 100%
call    1 returned 100%
        2:   56:    lat_asignar_contexto_objeto(lat_obtener_contexto(ret), lat_cadena_nueva(ret, "=="), lat_definir_cfuncion(ret, lat_igualdad));
call    0 returned 100%
call    1 returned 100%
        2:   57:    lat_asignar_contexto_objeto(lat_obtener_contexto(ret), lat_cadena_nueva(ret, "<"), lat_definir_cfuncion(ret, lat_menor_que));
call    0 returned 100%
call    1 returned 100%
        2:   58:    lat_asignar_contexto_objeto(lat_obtener_contexto(ret), lat_cadena_nueva(ret, "<="), lat_definir_cfuncion(ret, lat_menor_igual));
call    0 returned 100%
call    1 returned 100%
        2:   59:    lat_asignar_contexto_objeto(lat_obtener_contexto(ret), lat_cadena_nueva(ret, ">"), lat_definir_cfuncion(ret, lat_mayor_que));
call    0 returned 100%
call    1 returned 100%
        2:   60:    lat_asignar_contexto_objeto(lat_obtener_contexto(ret), lat_cadena_nueva(ret, ">="), lat_definir_cfuncion(ret, lat_mayor_igual));
call    0 returned 100%
call    1 returned 100%
        2:   61:    lat_asignar_contexto_objeto(lat_obtener_contexto(ret), lat_cadena_nueva(ret, "&&"), lat_definir_cfuncion(ret, lat_y));
call    0 returned 100%
call    1 returned 100%
        -:   62:    //lat_asignar_contexto_objeto(lat_obtener_contexto(ret), lat_cadena_nueva(ret, "y"), lat_definir_cfuncion(ret, lat_y));
        2:   63:    lat_asignar_contexto_objeto(lat_obtener_contexto(ret), lat_cadena_nueva(ret, "||"), lat_definir_cfuncion(ret, lat_o));
call    0 returned 100%
call    1 returned 100%
        -:   64:    //lat_asignar_contexto_objeto(lat_obtener_contexto(ret), lat_cadena_nueva(ret, "o"), lat_definir_cfuncion(ret, lat_o));
        2:   65:    lat_asignar_contexto_objeto(lat_obtener_contexto(ret), lat_cadena_nueva(ret, "!"), lat_definir_cfuncion(ret, lat_negacion));
call    0 returned 100%
call    1 returned 100%
        -:   66:    //lat_asignar_contexto_objeto(lat_obtener_contexto(ret), lat_cadena_nueva(ret, "no"), lat_definir_cfuncion(ret, lat_negacion));
        -:   67:    //lat_asignar_contexto_objeto(lat_obtener_contexto(ret), lat_cadena_nueva(ret, "gc"), lat_definir_cfuncion(ret, lat_basurero));
        2:   68:    lat_asignar_contexto_objeto(lat_obtener_contexto(ret), lat_cadena_nueva(ret, "imprimir"), lat_definir_cfuncion(ret, lat_imprimir));
call    0 returned 100%
call    1 returned 100%
        -:   69:
        2:   70:    lat_asignar_contexto_objeto(lat_obtener_contexto(ret), lat_cadena_nueva(ret, "ejecutar"), lat_definir_cfuncion(ret, lat_ejecutar));
call    0 returned 100%
call    1 returned 100%
        2:   71:    lat_asignar_contexto_objeto(lat_obtener_contexto(ret), lat_cadena_nueva(ret, "ejecutar_archivo"), lat_definir_cfuncion(ret, lat_ejecutar_archivo));
call    0 returned 100%
call    1 returned 100%
        -:   72:
        -:   73:    /* funciones matematicas */
        2:   74:    lat_asignar_contexto_objeto(lat_obtener_contexto(ret), lat_cadena_nueva(ret, "arco_coseno"), lat_definir_cfuncion(ret, lat_arco_coseno));
call    0 returned 100%
call    1 returned 100%
        2:   75:    lat_asignar_contexto_objeto(lat_obtener_contexto(ret), lat_cadena_nueva(ret, "arco_seno"), lat_definir_cfuncion(ret, lat_arco_seno));
call    0 returned 100%
call    1 returned 100%
        2:   76:    lat_asignar_contexto_objeto(lat_obtener_contexto(ret), lat_cadena_nueva(ret, "arco_tangente"), lat_definir_cfuncion(ret, lat_arco_tangente));
call    0 returned 100%
call    1 returned 100%
        2:   77:    lat_asignar_contexto_objeto(lat_obtener_contexto(ret), lat_cadena_nueva(ret, "arco_tangente2"), lat_definir_cfuncion(ret, lat_arco_tangente2));
call    0 returned 100%
call    1 returned 100%
        2:   78:    lat_asignar_contexto_objeto(lat_obtener_contexto(ret), lat_cadena_nueva(ret, "coseno"), lat_definir_cfuncion(ret, lat_coseno));
call    0 returned 100%
call    1 returned 100%
        2:   79:    lat_asignar_contexto_objeto(lat_obtener_contexto(ret), lat_cadena_nueva(ret, "coseno_hiperbolico"), lat_definir_cfuncion(ret, lat_coseno_hiperbolico));
call    0 returned 100%
call    1 returned 100%
        2:   80:    lat_asignar_contexto_objeto(lat_obtener_contexto(ret), lat_cadena_nueva(ret, "seno"), lat_definir_cfuncion(ret, lat_seno));
call    0 returned 100%
call    1 returned 100%
        2:   81:    lat_asignar_contexto_objeto(lat_obtener_contexto(ret), lat_cadena_nueva(ret, "seno_hiperbolico"), lat_definir_cfuncion(ret, lat_seno_hiperbolico));
call    0 returned 100%
call    1 returned 100%
        2:   82:    lat_asignar_contexto_objeto(lat_obtener_contexto(ret), lat_cadena_nueva(ret, "tangente"), lat_definir_cfuncion(ret, lat_tangente));
call    0 returned 100%
call    1 returned 100%
        2:   83:    lat_asignar_contexto_objeto(lat_obtener_contexto(ret), lat_cadena_nueva(ret, "tangente_hiperbolica"), lat_definir_cfuncion(ret, lat_tangente_hiperbolica));
call    0 returned 100%
call    1 returned 100%
        2:   84:    lat_asignar_contexto_objeto(lat_obtener_contexto(ret), lat_cadena_nueva(ret, "exponente"), lat_definir_cfuncion(ret, lat_exponente));
call    0 returned 100%
call    1 returned 100%
        -:   85:    //lat_asignar_contexto_objeto(lat_obtener_contexto(ret), lat_cadena_nueva(ret, "frexp"), lat_definir_cfuncion(ret, lat_frexp));
        -:   86:    //lat_asignar_contexto_objeto(lat_obtener_contexto(ret), lat_cadena_nueva(ret, "ldexp"), lat_definir_cfuncion(ret, lat_ldexp));
        2:   87:    lat_asignar_contexto_objeto(lat_obtener_contexto(ret), lat_cadena_nueva(ret, "logaritmo_natural"), lat_definir_cfuncion(ret, lat_logaritmo_natural));
call    0 returned 100%
call    1 returned 100%
        2:   88:    lat_asignar_contexto_objeto(lat_obtener_contexto(ret), lat_cadena_nueva(ret, "logaritmo_base10"), lat_definir_cfuncion(ret, lat_logaritmo_base10));
call    0 returned 100%
call    1 returned 100%
        -:   89:    //lat_asignar_contexto_objeto(lat_obtener_contexto(ret), lat_cadena_nueva(ret, "modf"), lat_definir_cfuncion(ret, lat_modf));
        2:   90:    lat_asignar_contexto_objeto(lat_obtener_contexto(ret), lat_cadena_nueva(ret, "potencia"), lat_definir_cfuncion(ret, lat_potencia));
call    0 returned 100%
call    1 returned 100%
        2:   91:    lat_asignar_contexto_objeto(lat_obtener_contexto(ret), lat_cadena_nueva(ret, "raiz_cuadrada"), lat_definir_cfuncion(ret, lat_raiz_cuadrada));
call    0 returned 100%
call    1 returned 100%
        2:   92:    lat_asignar_contexto_objeto(lat_obtener_contexto(ret), lat_cadena_nueva(ret, "redondear_arriba"), lat_definir_cfuncion(ret, lat_redondear_arriba));
call    0 returned 100%
call    1 returned 100%
        2:   93:    lat_asignar_contexto_objeto(lat_obtener_contexto(ret), lat_cadena_nueva(ret, "valor_absoluto"), lat_definir_cfuncion(ret, lat_valor_absoluto));
call    0 returned 100%
call    1 returned 100%
        2:   94:    lat_asignar_contexto_objeto(lat_obtener_contexto(ret), lat_cadena_nueva(ret, "redondear_abajo"), lat_definir_cfuncion(ret, lat_redondeo_abajo));
call    0 returned 100%
call    1 returned 100%
        2:   95:    lat_asignar_contexto_objeto(lat_obtener_contexto(ret), lat_cadena_nueva(ret, "modulo"), lat_definir_cfuncion(ret, lat_modulo_decimal));
call    0 returned 100%
call    1 returned 100%
        -:   96:
        -:   97:    /*funciones para cadenas (string)*/
        2:   98:    lat_asignar_contexto_objeto(lat_obtener_contexto(ret), lat_cadena_nueva(ret, "comparar"), lat_definir_cfuncion(ret, lat_comparar));
call    0 returned 100%
call    1 returned 100%
        2:   99:    lat_asignar_contexto_objeto(lat_obtener_contexto(ret), lat_cadena_nueva(ret, "concatenar"), lat_definir_cfuncion(ret, lat_concatenar));
call    0 returned 100%
call    1 returned 100%
        2:  100:    lat_asignar_contexto_objeto(lat_obtener_contexto(ret), lat_cadena_nueva(ret, "."), lat_definir_cfuncion(ret, lat_concatenar));
call    0 returned 100%
call    1 returned 100%
        2:  101:    lat_asignar_contexto_objeto(lat_obtener_contexto(ret), lat_cadena_nueva(ret, "contiene"), lat_definir_cfuncion(ret, lat_contiene));
call    0 returned 100%
call    1 returned 100%
        2:  102:    lat_asignar_contexto_objeto(lat_obtener_contexto(ret), lat_cadena_nueva(ret, "copiar"), lat_definir_cfuncion(ret, lat_copiar));
call    0 returned 100%
call    1 returned 100%
        2:  103:    lat_asignar_contexto_objeto(lat_obtener_contexto(ret), lat_cadena_nueva(ret, "termina_con"), lat_definir_cfuncion(ret, lat_termina_con));
call    0 returned 100%
call    1 returned 100%
        2:  104:    lat_asignar_contexto_objeto(lat_obtener_contexto(ret), lat_cadena_nueva(ret, "es_igual"), lat_definir_cfuncion(ret, lat_es_igual));
call    0 returned 100%
call    1 returned 100%
        -:  105:    //TODO: Pendiente
        -:  106:    //lat_asignar_contexto_objeto(lat_obtener_contexto(ret), lat_cadena_nueva(ret, "formato"), lat_definir_cfuncion(ret, lat_format));
        2:  107:    lat_asignar_contexto_objeto(lat_obtener_contexto(ret), lat_cadena_nueva(ret, "indice"), lat_definir_cfuncion(ret, lat_indice));
call    0 returned 100%
call    1 returned 100%
        2:  108:    lat_asignar_contexto_objeto(lat_obtener_contexto(ret), lat_cadena_nueva(ret, "insertar"), lat_definir_cfuncion(ret, lat_insertar));
call    0 returned 100%
call    1 returned 100%
        2:  109:    lat_asignar_contexto_objeto(lat_obtener_contexto(ret), lat_cadena_nueva(ret, "ultimo_indice"), lat_definir_cfuncion(ret, lat_ultimo_indice));
call    0 returned 100%
call    1 returned 100%
        2:  110:    lat_asignar_contexto_objeto(lat_obtener_contexto(ret), lat_cadena_nueva(ret, "rellenar_izquierda"), lat_definir_cfuncion(ret, lat_rellenar_izquierda));
call    0 returned 100%
call    1 returned 100%
        2:  111:    lat_asignar_contexto_objeto(lat_obtener_contexto(ret), lat_cadena_nueva(ret, "rellenar_derecha"), lat_definir_cfuncion(ret, lat_rellenar_derecha));
call    0 returned 100%
call    1 returned 100%
        2:  112:    lat_asignar_contexto_objeto(lat_obtener_contexto(ret), lat_cadena_nueva(ret, "eliminar"), lat_definir_cfuncion(ret, lat_eliminar));
call    0 returned 100%
call    1 returned 100%
        2:  113:    lat_asignar_contexto_objeto(lat_obtener_contexto(ret), lat_cadena_nueva(ret, "esta_vacia"), lat_definir_cfuncion(ret, lat_esta_vacia));
call    0 returned 100%
call    1 returned 100%
        2:  114:    lat_asignar_contexto_objeto(lat_obtener_contexto(ret), lat_cadena_nueva(ret, "longitud"), lat_definir_cfuncion(ret, lat_longitud));
call    0 returned 100%
call    1 returned 100%
        2:  115:    lat_asignar_contexto_objeto(lat_obtener_contexto(ret), lat_cadena_nueva(ret, "reemplazar"), lat_definir_cfuncion(ret, lat_reemplazar));
call    0 returned 100%
call    1 returned 100%
        -:  116:    //TODO: Pendiente, se implementara cuando se implementen Listas
        -:  117:    //lat_asignar_contexto_objeto(lat_obtener_contexto(ret), lat_cadena_nueva(ret, "partir"), lat_definir_cfuncion(ret, lat_split));
        2:  118:    lat_asignar_contexto_objeto(lat_obtener_contexto(ret), lat_cadena_nueva(ret, "empieza_con"), lat_definir_cfuncion(ret, lat_empieza_con));
call    0 returned 100%
call    1 returned 100%
        2:  119:    lat_asignar_contexto_objeto(lat_obtener_contexto(ret), lat_cadena_nueva(ret, "subcadena"), lat_definir_cfuncion(ret, lat_subcadena));
call    0 returned 100%
call    1 returned 100%
        2:  120:    lat_asignar_contexto_objeto(lat_obtener_contexto(ret), lat_cadena_nueva(ret, "minusculas"), lat_definir_cfuncion(ret, lat_minusculas));
call    0 returned 100%
call    1 returned 100%
        2:  121:    lat_asignar_contexto_objeto(lat_obtener_contexto(ret), lat_cadena_nueva(ret, "mayusculas"), lat_definir_cfuncion(ret, lat_mayusculas));
call    0 returned 100%
call    1 returned 100%
        2:  122:    lat_asignar_contexto_objeto(lat_obtener_contexto(ret), lat_cadena_nueva(ret, "quitar_espacios"), lat_definir_cfuncion(ret, lat_quitar_espacios));
call    0 returned 100%
call    1 returned 100%
        -:  123:
        -:  124:    //entrada / salida
        2:  125:    lat_asignar_contexto_objeto(lat_obtener_contexto(ret), lat_cadena_nueva(ret, "leer"), lat_definir_cfuncion(ret, lat_leer));
call    0 returned 100%
call    1 returned 100%
        2:  126:    lat_asignar_contexto_objeto(lat_obtener_contexto(ret), lat_cadena_nueva(ret, "escribir"), lat_definir_cfuncion(ret, lat_imprimir));
call    0 returned 100%
call    1 returned 100%
        2:  127:    lat_asignar_contexto_objeto(lat_obtener_contexto(ret), lat_cadena_nueva(ret, "leer_archivo"), lat_definir_cfuncion(ret, lat_leer_archivo));
call    0 returned 100%
call    1 returned 100%
        2:  128:    lat_asignar_contexto_objeto(lat_obtener_contexto(ret), lat_cadena_nueva(ret, "escribir_archivo"), lat_definir_cfuncion(ret, lat_escribir_archivo));
call    0 returned 100%
call    1 returned 100%
        -:  129:
        -:  130:    /*conversion de tipos de dato*/
        2:  131:    lat_asignar_contexto_objeto(lat_obtener_contexto(ret), lat_cadena_nueva(ret, "tipo"), lat_definir_cfuncion(ret, lat_tipo));
call    0 returned 100%
call    1 returned 100%
        2:  132:    lat_asignar_contexto_objeto(lat_obtener_contexto(ret), lat_cadena_nueva(ret, "logico"), lat_definir_cfuncion(ret, lat_logico));
call    0 returned 100%
call    1 returned 100%
        2:  133:    lat_asignar_contexto_objeto(lat_obtener_contexto(ret), lat_cadena_nueva(ret, "entero"), lat_definir_cfuncion(ret, lat_entero));
call    0 returned 100%
call    1 returned 100%
        2:  134:    lat_asignar_contexto_objeto(lat_obtener_contexto(ret), lat_cadena_nueva(ret, "decimal"), lat_definir_cfuncion(ret, lat_decimal));
call    0 returned 100%
call    1 returned 100%
        2:  135:    lat_asignar_contexto_objeto(lat_obtener_contexto(ret), lat_cadena_nueva(ret, "cadena"), lat_definir_cfuncion(ret, lat_cadena));
call    0 returned 100%
call    1 returned 100%
        2:  136:    lat_asignar_contexto_objeto(lat_obtener_contexto(ret), lat_cadena_nueva(ret, "salir"), lat_definir_cfuncion(ret, lat_salir));
call    0 returned 100%
call    1 returned 100%
        -:  137:
        -:  138:    /*ejemplo de implementacion de una funcion en C */
        2:  139:    lat_asignar_contexto_objeto(lat_obtener_contexto(ret), lat_cadena_nueva(ret, "maximo"), lat_definir_cfuncion(ret, lat_maximo));
call    0 returned 100%
call    1 returned 100%
        -:  140:    /*Creacion dela funcion minimo*/
        2:  141:    lat_asignar_contexto_objeto(lat_obtener_contexto(ret), lat_cadena_nueva(ret, "minimo"), lat_definir_cfuncion(ret, lat_minimo));
call    0 returned 100%
call    1 returned 100%
        -:  142:
        2:  143:    lat_asignar_contexto_objeto(lat_obtener_contexto(ret), lat_cadena_nueva(ret, "sistema"), lat_definir_cfuncion(ret, lat_sistema));
call    0 returned 100%
call    1 returned 100%
        -:  144:
        -:  145:    /*operaciones con listas*/
        2:  146:    lat_asignar_contexto_objeto(lat_obtener_contexto(ret), lat_cadena_nueva(ret, "agregar"), lat_definir_cfuncion(ret, lat_agregar));
call    0 returned 100%
call    1 returned 100%
        1:  147:    return ret;
        -:  148:}
        -:  149:
function lat_apilar called 1 returned 100% blocks executed 100%
        1:  150:void lat_apilar(lat_vm* vm, lat_objeto* o)
        -:  151:{
      130:  152:    insert_list(vm->pila, (void*)o);
call    0 returned 100%
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 returned 100%
        1:  153:}
        -:  154:
function lat_desapilar called 129 returned 100% blocks executed 67%
      129:  155:lat_objeto* lat_desapilar(lat_vm* vm)
        -:  156:{
      129:  157:    list_node* n = vm->pila->next;
      129:  158:    if (n->data == NULL)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  159:    {
    #####:  160:        lat_registrar_error("Pila vacia");
call    0 never executed
        -:  161:    }
        -:  162:    else
        -:  163:    {
      129:  164:        n->prev->next = n->next;
      129:  165:        n->next->prev = n->prev;
        -:  166:        lat_objeto* ret = (lat_objeto*)n->data;
      129:  167:        lat_liberar_memoria(n);
call    0 returned 100%
      129:  168:        return ret;
        -:  169:    }
    #####:  170:    return NULL;
        -:  171:}
        -:  172:
        -:  173:/*
        -:  174:lat_objeto* lat_desapilar(lat_vm* vm)
        -:  175:{
        -:  176:    list_node* n = vm->pila;
        -:  177:    if (n->data == NULL)
        -:  178:    {
        -:  179:        lat_registrar_error("Pila vacia");
        -:  180:    }
        -:  181:    else
        -:  182:    {
        -:  183:        list_node * curr = n;
        -:  184:        while (curr->next != NULL)
        -:  185:        {
        -:  186:            curr = curr->next;
        -:  187:        }        
        -:  188:        lat_objeto* ret = (lat_objeto*)curr->data;
        -:  189:        return ret;
        -:  190:    }
        -:  191:    return NULL;
        -:  192:}
        -:  193:*/
        -:  194:
function lat_apilar_lista called 0 returned 0% blocks executed 0%
    #####:  195:void lat_apilar_lista(lat_objeto* lista, lat_objeto* o)
        -:  196:{
    #####:  197:    insert_list(lista->data.lista, (void*)o);
call    0 never executed
call    1 never executed
    #####:  198:}
        -:  199:
function lat_desapilar_lista called 0 returned 0% blocks executed 0%
    #####:  200:lat_objeto* lat_desapilar_lista(lat_objeto* lista)
        -:  201:{
    #####:  202:    list_node* n = ((list_node*)lista)->next;
    #####:  203:    if (n->data == NULL)
branch  0 never executed
branch  1 never executed
        -:  204:    {
    #####:  205:        lat_registrar_error("Lista vacia");
call    0 never executed
        -:  206:    }
        -:  207:    else
        -:  208:    {
    #####:  209:        n->prev->next = n->next;
    #####:  210:        n->next->prev = n->prev;
        -:  211:        lat_objeto* ret = (lat_objeto*)n->data;
    #####:  212:        return ret;
        -:  213:    }
    #####:  214:    return NULL;
        -:  215:}
        -:  216:
function lat_apilar_contexto called 4 returned 100% blocks executed 75%
        4:  217:void lat_apilar_contexto(lat_vm* vm)
        -:  218:{
        4:  219:    if (vm->apuntador_pila >= MAX_STACK_SIZE)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  220:    {
    #####:  221:        lat_registrar_error("Namespace desborde de la pila");
call    0 never executed
        -:  222:    }
        4:  223:    vm->contexto_pila[vm->apuntador_pila + 1] = lat_clonar_objeto(vm, vm->contexto_pila[vm->apuntador_pila]);
call    0 returned 100%
        4:  224:    vm->apuntador_pila++;
        4:  225:}
        -:  226:
function lat_desapilar_contexto called 4 returned 100% blocks executed 75%
        4:  227:void lat_desapilar_contexto(lat_vm* vm)
        -:  228:{
        4:  229:    if (vm->apuntador_pila == 0)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  230:    {
    #####:  231:        lat_registrar_error("Namespace pila vacia");
call    0 never executed
        -:  232:    }
        4:  233:    lat_eliminar_objeto(vm, vm->contexto_pila[vm->apuntador_pila--]);
call    0 returned 100%
        4:  234:}
        -:  235:
function lat_apilar_contexto_predefinido called 0 returned 0% blocks executed 0%
    #####:  236:void lat_apilar_contexto_predefinido(lat_vm* vm, lat_objeto* ctx)
        -:  237:{
    #####:  238:    if (vm->apuntador_pila >= 255)
branch  0 never executed
branch  1 never executed
        -:  239:    {
    #####:  240:        lat_registrar_error("Namespace desborde de la pila");
call    0 never executed
        -:  241:    }
    #####:  242:    vm->contexto_pila[++vm->apuntador_pila] = ctx;
    #####:  243:}
        -:  244:
function lat_desapilar_contexto_predefinido called 0 returned 0% blocks executed 0%
    #####:  245:lat_objeto* lat_desapilar_contexto_predefinido(lat_vm* vm)
        -:  246:{
    #####:  247:    if (vm->apuntador_pila == 0)
branch  0 never executed
branch  1 never executed
        -:  248:    {
    #####:  249:        lat_registrar_error("Namespace pila vacia");
call    0 never executed
        -:  250:    }
    #####:  251:    return vm->contexto_pila[vm->apuntador_pila--];
        -:  252:}
        -:  253:
function lat_obtener_contexto called 0 returned 0% blocks executed 0%
    #####:  254:lat_objeto* lat_obtener_contexto(lat_vm* vm)
        -:  255:{
      248:  256:    return vm->contexto_pila[vm->apuntador_pila];
        -:  257:}
        -:  258:
function lat_basurero_agregar called 0 returned 0% blocks executed 0%
    #####:  259:void lat_basurero_agregar(lat_vm* vm, lat_objeto* o)
        -:  260:{
    #####:  261:    insert_list(vm->basurero_objetos, (void*)o);
call    0 never executed
    #####:  262:}
        -:  263:
function lat_basurero called 0 returned 0% blocks executed 0%
    #####:  264:void lat_basurero(lat_vm* vm)
        -:  265:{
        -:  266:    int i = 0;
    #####:  267:    for (i = 0; i < 256; i++)
branch  0 never executed
branch  1 never executed
        -:  268:    {
    #####:  269:        if (((lat_objeto*)vm->registros[i]) != 0x0)
branch  0 never executed
branch  1 never executed
        -:  270:        {
    #####:  271:            if (((lat_objeto*)vm->registros[i])->marked != 3)
branch  0 never executed
branch  1 never executed
        -:  272:            {
    #####:  273:                ((lat_objeto*)vm->registros[i])->marked = 2;
        -:  274:            }
        -:  275:        }
        -:  276:    }
        -:  277:    list_node* c;
        -:  278:    lat_objeto* cur;
    #####:  279:    for (c = vm->basurero_objetos->next; c != NULL; c = c->next)
branch  0 never executed
branch  1 never executed
        -:  280:    {
    #####:  281:        if (c->data != NULL)
branch  0 never executed
branch  1 never executed
        -:  282:        {
        -:  283:            cur = (lat_objeto*)c->data;
    #####:  284:            if (cur->marked == 0)
branch  0 never executed
branch  1 never executed
        -:  285:            {
    #####:  286:                lat_eliminar_objeto(vm, cur);
call    0 never executed
    #####:  287:                list_node* prev = c->prev;
    #####:  288:                c->prev->next = c->next;
    #####:  289:                c->next->prev = c->prev;
        -:  290:                //free(c);
        -:  291:                c = prev;
        -:  292:            }
    #####:  293:            else if (cur->marked == 2)
branch  0 never executed
branch  1 never executed
        -:  294:            {
    #####:  295:                cur->marked = 1;
        -:  296:            }
    #####:  297:            else if (cur->marked == 1)
branch  0 never executed
branch  1 never executed
        -:  298:            {
    #####:  299:                cur->marked = 0;
        -:  300:            }
        -:  301:        }
        -:  302:        //free(c);
        -:  303:    }
    #####:  304:}
        -:  305:
function lat_definir_funcion called 4 returned 100% blocks executed 100%
        4:  306:lat_objeto* lat_definir_funcion(lat_vm* vm, lat_bytecode* inslist)
        -:  307:{
        4:  308:    lat_objeto* ret = lat_funcion_nueva(vm);
call    0 returned 100%
        4:  309:    lat_function* fval = (lat_function*)lat_asignar_memoria(sizeof(lat_function));
call    0 returned 100%
        4:  310:    fval->bcode = inslist;
        4:  311:    ret->data.func = fval;
        -:  312:    //vm->memoria_usada += sizeof(sizeof(lat_function));
        4:  313:    return ret;
        -:  314:}
        -:  315:
function lat_definir_cfuncion called 0 returned 0% blocks executed 0%
    #####:  316:lat_objeto* lat_definir_cfuncion(lat_vm* vm, void (*function)(lat_vm* vm))
        -:  317:{
       71:  318:    lat_objeto* ret = lat_cfuncion_nueva(vm);
call    0 never executed
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
call    6 returned 100%
call    7 returned 100%
call    8 returned 100%
call    9 returned 100%
call   10 returned 100%
call   11 returned 100%
call   12 returned 100%
call   13 returned 100%
call   14 returned 100%
call   15 returned 100%
call   16 returned 100%
call   17 returned 100%
call   18 returned 100%
call   19 returned 100%
call   20 returned 100%
call   21 returned 100%
call   22 returned 100%
call   23 returned 100%
call   24 returned 100%
call   25 returned 100%
call   26 returned 100%
call   27 returned 100%
call   28 returned 100%
call   29 returned 100%
call   30 returned 100%
call   31 returned 100%
call   32 returned 100%
call   33 returned 100%
call   34 returned 100%
call   35 returned 100%
call   36 returned 100%
call   37 returned 100%
call   38 returned 100%
call   39 returned 100%
call   40 returned 100%
call   41 returned 100%
call   42 returned 100%
call   43 returned 100%
call   44 returned 100%
call   45 returned 100%
call   46 returned 100%
call   47 returned 100%
call   48 returned 100%
call   49 returned 100%
call   50 returned 100%
call   51 returned 100%
call   52 returned 100%
call   53 returned 100%
call   54 returned 100%
call   55 returned 100%
call   56 returned 100%
call   57 returned 100%
call   58 returned 100%
call   59 returned 100%
call   60 returned 100%
call   61 returned 100%
call   62 returned 100%
call   63 returned 100%
call   64 returned 100%
call   65 returned 100%
call   66 returned 100%
call   67 returned 100%
call   68 returned 100%
call   69 returned 100%
call   70 returned 100%
call   71 returned 100%
       71:  319:    ret->data.cfunc = function;
    #####:  320:    return ret;
        -:  321:}
        -:  322:
function lat_numero_lista called 0 returned 0% blocks executed 0%
    #####:  323:void lat_numero_lista(lat_vm* vm)
        -:  324:{
    #####:  325:    lat_objeto* index = lat_desapilar(vm);
call    0 never executed
    #####:  326:    long i = lat_obtener_entero(index);
call    0 never executed
    #####:  327:    lat_objeto* lista = lat_desapilar(vm);
call    0 never executed
    #####:  328:    list_node* l = lista->data.lista;
        -:  329:    int counter = 0;
        -:  330:    list_node* c;
    #####:  331:    for (c = l->next; c->next != NULL; c = c->next)
branch  0 never executed
branch  1 never executed
        -:  332:    {
    #####:  333:        if (c->data != NULL)
branch  0 never executed
branch  1 never executed
        -:  334:        {
    #####:  335:            if (counter == i)
branch  0 never executed
branch  1 never executed
        -:  336:            {
    #####:  337:                vm->registros[255] = (lat_objeto*)c->data;
    #####:  338:                return;
        -:  339:            }
    #####:  340:            counter++;
        -:  341:        }
        -:  342:    }
    #####:  343:    lat_registrar_error("Lista: indice fuera de rango");
call    0 never executed
        -:  344:}
        -:  345:
function lat_imprimir_elem called 0 returned 0% blocks executed 0%
    #####:  346:static void lat_imprimir_elem(lat_vm* vm)
        -:  347:{
    #####:  348:    lat_objeto* in = lat_desapilar(vm);
call    0 never executed
    #####:  349:    if (in->type == T_NULO)
branch  0 never executed
branch  1 never executed
        -:  350:    {
    #####:  351:        fprintf(stdout, "%s", "nulo");
call    0 never executed
        -:  352:    }
    #####:  353:    else if (in->type == T_INSTANCE)
branch  0 never executed
branch  1 never executed
        -:  354:    {
    #####:  355:        fprintf(stdout, "%s", "objeto");
call    0 never executed
        -:  356:    }
    #####:  357:    else if (in->type == T_LIT)
branch  0 never executed
branch  1 never executed
        -:  358:    {
    #####:  359:        fprintf(stdout, "%s", lat_obtener_literal(in));
call    0 never executed
call    1 never executed
        -:  360:    }
    #####:  361:    else if (in->type == T_INT)
branch  0 never executed
branch  1 never executed
        -:  362:    {
    #####:  363:        fprintf(stdout, "%ld", lat_obtener_entero(in));
call    0 never executed
call    1 never executed
        -:  364:    }
    #####:  365:    else if (in->type == T_DOUBLE)
branch  0 never executed
branch  1 never executed
        -:  366:    {
    #####:  367:        fprintf(stdout, "%.14g\n", lat_obtener_decimal(in));
call    0 never executed
call    1 never executed
        -:  368:    }
    #####:  369:    else if (in->type == T_STR)
branch  0 never executed
branch  1 never executed
        -:  370:    {
    #####:  371:        fprintf(stdout, "%s", lat_obtener_cadena(in));
call    0 never executed
call    1 never executed
        -:  372:    }
    #####:  373:    else if (in->type == T_BOOL)
branch  0 never executed
branch  1 never executed
        -:  374:    {
    #####:  375:        fprintf(stdout, "%i", lat_obtener_logico(in));
call    0 never executed
call    1 never executed
        -:  376:    }
    #####:  377:    else if (in->type == T_LIST)
branch  0 never executed
branch  1 never executed
        -:  378:    {
    #####:  379:        lat_imprimir_lista(vm, in->data.lista);
call    0 never executed
        -:  380:    }
    #####:  381:    else if (in->type == T_DICT)
branch  0 never executed
branch  1 never executed
        -:  382:    {
    #####:  383:        lat_imprimir_diccionario(vm, in->data.dict);
call    0 never executed
        -:  384:    }
    #####:  385:    else if (in->type == T_FUNC)
branch  0 never executed
branch  1 never executed
        -:  386:    {
        -:  387:        //fprintf(stdout, "%s", "Funcion");
        -:  388:    }
    #####:  389:    else if (in->type == T_CFUNC)
branch  0 never executed
branch  1 never executed
        -:  390:    {
        -:  391:        //fprintf(stdout, "%s", "C_Funcion");
        -:  392:    }
    #####:  393:    else if (in->type == T_STRUCT)
branch  0 never executed
branch  1 never executed
        -:  394:    {
    #####:  395:        fprintf(stdout, "%s", "Struct");
call    0 never executed
        -:  396:    }
        -:  397:    else
        -:  398:    {
    #####:  399:        fprintf(stdout, "Tipo desconocido %d\n", in->type);
call    0 never executed
        -:  400:    }
    #####:  401:    vm->registros[255] = in;
    #####:  402:}
        -:  403:
function lat_imprimir called 43 returned 100% blocks executed 58%
       43:  404:void lat_imprimir(lat_vm* vm)
        -:  405:{
       43:  406:    lat_objeto* in = lat_desapilar(vm);
call    0 returned 100%
       43:  407:    if (in->type == T_NULO)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  408:    {
    #####:  409:        fprintf(stdout, "%s\n", "nulo");
call    0 never executed
        -:  410:    }
       43:  411:    else if (in->type == T_INSTANCE)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  412:    {
    #####:  413:        fprintf(stdout, "%s\n", "Objeto");
call    0 never executed
        -:  414:    }
       43:  415:    else if (in->type == T_LIT)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  416:    {
    #####:  417:        fprintf(stdout, "%s\n", lat_obtener_literal(in));
call    0 never executed
call    1 never executed
        -:  418:    }
       43:  419:    else if (in->type == T_INT)
branch  0 taken 37% (fallthrough)
branch  1 taken 63%
        -:  420:    {
       16:  421:        fprintf(stdout, "%ld\n", lat_obtener_entero(in));
call    0 returned 100%
call    1 returned 100%
        -:  422:    }
       27:  423:    else if (in->type == T_DOUBLE)
branch  0 taken 56% (fallthrough)
branch  1 taken 44%
        -:  424:    {
       15:  425:        fprintf(stdout, "%.14g\n", lat_obtener_decimal(in));
call    0 returned 100%
call    1 returned 100%
        -:  426:    }
       12:  427:    else if (in->type == T_STR)
branch  0 taken 92% (fallthrough)
branch  1 taken 8%
        -:  428:    {
       11:  429:        fprintf(stdout, "%s\n", lat_obtener_cadena(in));
call    0 returned 100%
call    1 returned 100%
        -:  430:    }
        1:  431:    else if (in->type == T_BOOL)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  432:    {
        1:  433:        if (lat_obtener_logico(in))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        -:  434:        {
        1:  435:            fprintf(stdout, "%s\n", "verdadero");
call    0 returned 100%
        -:  436:        }
        -:  437:        else
        -:  438:        {
    #####:  439:            fprintf(stdout, "%s\n", "falso");
call    0 never executed
        -:  440:        }
        -:  441:    }
    #####:  442:    else if (in->type == T_LIST)
branch  0 never executed
branch  1 never executed
        -:  443:    {
    #####:  444:        lat_imprimir_lista(vm, in->data.lista);
call    0 never executed
    #####:  445:        fprintf(stdout, "%s\n", "");
call    0 never executed
        -:  446:    }
    #####:  447:    else if (in->type == T_FUNC)
branch  0 never executed
branch  1 never executed
        -:  448:    {
        -:  449:        //fprintf(stdout, "%s\n", "Funcion");
        -:  450:    }
    #####:  451:    else if (in->type == T_CFUNC)
branch  0 never executed
branch  1 never executed
        -:  452:    {
        -:  453:        //fprintf(stdout, "%s\n", "C_Funcion");
        -:  454:    }
    #####:  455:    else if (in->type == T_STRUCT)
branch  0 never executed
branch  1 never executed
        -:  456:    {
    #####:  457:        fprintf(stdout, "%s\n", "Struct");
call    0 never executed
        -:  458:    }
        -:  459:    else
        -:  460:    {
    #####:  461:        fprintf(stdout, "Tipo desconocido %d\n", in->type);
call    0 never executed
        -:  462:    }
       43:  463:    vm->registros[255] = in;
       43:  464:}
        -:  465:
function lat_imprimir_lista called 0 returned 0% blocks executed 0%
    #####:  466:void lat_imprimir_lista(lat_vm* vm, list_node* l)
        -:  467:{
    #####:  468:    fprintf(stdout, "%s", "[ ");
call    0 never executed
    #####:  469:    if (l != NULL && length_list(l) > 0)
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -:  470:    {
        -:  471:        list_node* c;
    #####:  472:        for (c = l->next; c != NULL; c = c->next)
branch  0 never executed
branch  1 never executed
        -:  473:        {
    #####:  474:            if (c->data != NULL)
branch  0 never executed
branch  1 never executed
        -:  475:            {
        -:  476:                lat_objeto* o = ((lat_objeto*)c->data);
        -:  477:                //printf("\ntype %i, obj_ref: %p\n", o->type, o);
    #####:  478:                if (o->type == T_LIST)
branch  0 never executed
branch  1 never executed
        -:  479:                {
    #####:  480:                    lat_imprimir_lista(vm, o->data.lista);
call    0 never executed
    #####:  481:                    if (c->next)
branch  0 never executed
branch  1 never executed
        -:  482:                    {
    #####:  483:                        fprintf(stdout, "%s", ", ");
call    0 never executed
        -:  484:                    }
        -:  485:                }
        -:  486:                else
        -:  487:                {
    #####:  488:                    if (o->type)
branch  0 never executed
branch  1 never executed
        -:  489:                    {
        -:  490:                        lat_apilar(vm, o);
    #####:  491:                        lat_imprimir_elem(vm);
call    0 never executed
    #####:  492:                        if (c->next)
branch  0 never executed
branch  1 never executed
        -:  493:                        {
    #####:  494:                            fprintf(stdout, "%s", ", ");
call    0 never executed
        -:  495:                        }
        -:  496:                    }
        -:  497:                }
        -:  498:            }
        -:  499:        }
        -:  500:    }
    #####:  501:    fprintf(stdout, "%s", " ]");
call    0 never executed
    #####:  502:}
        -:  503:
function lat_imprimir_diccionario called 0 returned 0% blocks executed 0%
    #####:  504:void lat_imprimir_diccionario(lat_vm* vm, hash_map* d)
        -:  505:{
    #####:  506:    fprintf(stdout, "%s", "{ ");
call    0 never executed
    #####:  507:    if (d != NULL)
branch  0 never executed
branch  1 never executed
        -:  508:    {
        -:  509:        list_node* c;
    #####:  510:        for (c = (list_node*) d->buckets; c != NULL; c = c->next)
branch  0 never executed
branch  1 never executed
        -:  511:        {
    #####:  512:            if (c->data != NULL)
branch  0 never executed
branch  1 never executed
        -:  513:            {
        -:  514:                lat_objeto* o = ((lat_objeto*)c->data);
        -:  515:                //printf("\ntype %i, obj_ref: %p\t, marked: %i", o->type, o, o->marked);
    #####:  516:                if (o->type == T_LIST)
branch  0 never executed
branch  1 never executed
        -:  517:                {
    #####:  518:                    lat_imprimir_lista(vm, o->data.lista);
call    0 never executed
    #####:  519:                    if (c->next->data)
branch  0 never executed
branch  1 never executed
        -:  520:                    {
    #####:  521:                        fprintf(stdout, "%s", ", ");
call    0 never executed
        -:  522:                    }
        -:  523:                }
    #####:  524:                if (o->type == T_DICT)
branch  0 never executed
branch  1 never executed
        -:  525:                {
    #####:  526:                    lat_imprimir_diccionario(vm, o->data.dict);
call    0 never executed
    #####:  527:                    if (c->next->data)
branch  0 never executed
branch  1 never executed
        -:  528:                    {
    #####:  529:                        fprintf(stdout, "%s", ", ");
call    0 never executed
        -:  530:                    }
        -:  531:                }
        -:  532:                else
        -:  533:                {
    #####:  534:                    if (o->type)
branch  0 never executed
branch  1 never executed
        -:  535:                    {
        -:  536:                        lat_apilar(vm, o);
    #####:  537:                        lat_imprimir_elem(vm);
call    0 never executed
    #####:  538:                        if (c->next->data)
branch  0 never executed
branch  1 never executed
        -:  539:                        {
    #####:  540:                            fprintf(stdout, "%s", ", ");
call    0 never executed
        -:  541:                        }
        -:  542:                    }
        -:  543:                }
        -:  544:            }
        -:  545:        }
        -:  546:    }
    #####:  547:    fprintf(stdout, "%s", " }");
call    0 never executed
    #####:  548:}
        -:  549:
function lat_ejecutar called 0 returned 0% blocks executed 0%
    #####:  550:void lat_ejecutar(lat_vm *vm)
        -:  551:{
        -:  552:    int status;
    #####:  553:    lat_objeto *func = nodo_analizar_arbol(vm, lat_analizar_expresion(vm, lat_obtener_cadena(lat_desapilar(vm)), &status));
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:  554:    lat_llamar_funcion(vm, func);
call    0 never executed
    #####:  555:    lat_apilar(vm, vm->registros[255]);
    #####:  556:}
        -:  557:
function lat_ejecutar_archivo called 0 returned 0% blocks executed 0%
    #####:  558:void lat_ejecutar_archivo(lat_vm *vm)
        -:  559:{
    #####:  560:    char *input = lat_obtener_cadena(lat_desapilar(vm));
call    0 never executed
call    1 never executed
    #####:  561:    char *dot = strrchr(input, '.');
        -:  562:    char *extension;
    #####:  563:    if (!dot || dot == input)
branch  0 never executed
branch  1 never executed
        -:  564:    {
        -:  565:        extension = "";
        -:  566:    }
        -:  567:    else
        -:  568:    {
    #####:  569:        extension = dot + 1;
        -:  570:    }
    #####:  571:    if (strcmp(extension, "lat") == 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
        -:  572:    {
    #####:  573:        ast *tree = lat_analizar_archivo(vm, input);
call    0 never executed
    #####:  574:        if (!tree)
branch  0 never executed
branch  1 never executed
        -:  575:        {
    #####:  576:            lat_registrar_error("error al leer el archivo: %s", input);
call    0 never executed
        -:  577:        }
    #####:  578:        lat_objeto *func = nodo_analizar_arbol(vm, tree);
call    0 never executed
    #####:  579:        lat_llamar_funcion(vm, func);
call    0 never executed
    #####:  580:        lat_apilar(vm, vm->registros[255]);
        -:  581:    }
    #####:  582:}
        -:  583:
function lat_clonar called 0 returned 0% blocks executed 0%
    #####:  584:void lat_clonar(lat_vm* vm)
        -:  585:{
    #####:  586:    lat_objeto* ns = lat_desapilar(vm);
call    0 never executed
    #####:  587:    vm->registros[255] = lat_clonar_objeto(vm, ns);
call    0 never executed
    #####:  588:}
        -:  589:
function lat_sumar called 5 returned 100% blocks executed 94%
        5:  590:void lat_sumar(lat_vm* vm)
        -:  591:{
        5:  592:    lat_objeto* b = lat_desapilar(vm);
call    0 returned 100%
        5:  593:    lat_objeto* a = lat_desapilar(vm);
call    0 returned 100%
        5:  594:    if ((a->type != T_INT && a->type != T_DOUBLE) || (b->type != T_INT && b->type != T_DOUBLE))
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  595:    {
    #####:  596:        lat_registrar_error("Intento de aplicar operador \"+\" en tipos invalidos");
call    0 never executed
        -:  597:    }
        5:  598:    if (a->type == T_DOUBLE || b->type == T_DOUBLE)
branch  0 taken 60% (fallthrough)
branch  1 taken 40%
branch  2 taken 33% (fallthrough)
branch  3 taken 67%
        -:  599:    {
        3:  600:        vm->registros[255] = lat_decimal_nuevo(vm, lat_obtener_decimal(a) + lat_obtener_decimal(b));
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
        -:  601:    }
        -:  602:    else
        -:  603:    {
        2:  604:        vm->registros[255] = lat_entero_nuevo(vm, lat_obtener_entero(a) + lat_obtener_entero(b));
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
        -:  605:    }
        5:  606:}
        -:  607:
function lat_restar called 5 returned 100% blocks executed 94%
        5:  608:void lat_restar(lat_vm* vm)
        -:  609:{
        5:  610:    lat_objeto* b = lat_desapilar(vm);
call    0 returned 100%
        5:  611:    lat_objeto* a = lat_desapilar(vm);
call    0 returned 100%
        5:  612:    if ((a->type != T_INT && a->type != T_DOUBLE) || (b->type != T_INT && b->type != T_DOUBLE))
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  613:    {
    #####:  614:        lat_registrar_error("Intento de aplicar operador \"-\" en tipos invalidos");
call    0 never executed
        -:  615:    }
        5:  616:    if (a->type == T_DOUBLE || b->type == T_DOUBLE)
branch  0 taken 60% (fallthrough)
branch  1 taken 40%
branch  2 taken 33% (fallthrough)
branch  3 taken 67%
        -:  617:    {
        3:  618:        vm->registros[255] = lat_decimal_nuevo(vm, lat_obtener_decimal(a) - lat_obtener_decimal(b));
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
        -:  619:    }
        -:  620:    else
        -:  621:    {
        2:  622:        vm->registros[255] = lat_entero_nuevo(vm, lat_obtener_entero(a) - lat_obtener_entero(b));
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
        -:  623:    }
        5:  624:}
        -:  625:
function lat_multiplicar called 4 returned 100% blocks executed 94%
        4:  626:void lat_multiplicar(lat_vm* vm)
        -:  627:{
        4:  628:    lat_objeto* b = lat_desapilar(vm);
call    0 returned 100%
        4:  629:    lat_objeto* a = lat_desapilar(vm);
call    0 returned 100%
        4:  630:    if ((a->type != T_INT && a->type != T_DOUBLE) || (b->type != T_INT && b->type != T_DOUBLE))
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  631:    {
    #####:  632:        lat_registrar_error("Intento de aplicar operador \"*\" en tipos invalidos");
call    0 never executed
        -:  633:    }
        4:  634:    if (a->type == T_DOUBLE || b->type == T_DOUBLE)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
branch  2 taken 50% (fallthrough)
branch  3 taken 50%
        -:  635:    {
        3:  636:        vm->registros[255] = lat_decimal_nuevo(vm, lat_obtener_decimal(a) * lat_obtener_decimal(b));
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
        -:  637:    }
        -:  638:    else
        -:  639:    {
        1:  640:        vm->registros[255] = lat_entero_nuevo(vm, lat_obtener_entero(a) * lat_obtener_entero(b));
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
        -:  641:    }
        4:  642:}
        -:  643:
function lat_dividir called 5 returned 100% blocks executed 88%
        5:  644:void lat_dividir(lat_vm* vm)
        -:  645:{
        5:  646:    lat_objeto* b = lat_desapilar(vm);
call    0 returned 100%
        5:  647:    lat_objeto* a = lat_desapilar(vm);
call    0 returned 100%
        5:  648:    if ((a->type != T_INT && a->type != T_DOUBLE) || (b->type != T_INT && b->type != T_DOUBLE))
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  649:    {
    #####:  650:        lat_registrar_error("Intento de aplicar operador \"/\" en tipos invalidos");
call    0 never executed
        -:  651:    }
        5:  652:    if ((a->type == T_DOUBLE && b->type == T_DOUBLE) || (a->type == T_INT && b->type == T_DOUBLE))
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 40% (fallthrough)
branch  3 taken 60%
        -:  653:    {
        2:  654:        double tmp = lat_obtener_decimal(b);
call    0 returned 100%
        2:  655:        if (tmp == 0)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  656:        {
    #####:  657:            lat_registrar_error("Division por cero");
call    0 never executed
        -:  658:        }
        -:  659:        else
        -:  660:        {
        2:  661:            vm->registros[255] = lat_decimal_nuevo(vm, (lat_obtener_decimal(a) / tmp));
call    0 returned 100%
call    1 returned 100%
        -:  662:        }
        -:  663:    }
        -:  664:    else
        -:  665:    {
        3:  666:        int tmp = lat_obtener_entero(b);
call    0 returned 100%
        3:  667:        if (tmp == 0)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  668:        {
    #####:  669:            lat_registrar_error("Division por cero");
call    0 never executed
        -:  670:        }
        -:  671:        else
        -:  672:        {
        3:  673:            if (a->type == T_DOUBLE)
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        -:  674:            {
        1:  675:                vm->registros[255] = lat_decimal_nuevo(vm, (lat_obtener_decimal(a) / tmp));
call    0 returned 100%
call    1 returned 100%
        -:  676:            }
        -:  677:            else
        -:  678:            {
        2:  679:                vm->registros[255] = lat_decimal_nuevo(vm, (lat_obtener_entero(a) / tmp));
call    0 returned 100%
call    1 returned 100%
        -:  680:            }
        -:  681:        }
        -:  682:    }
        5:  683:}
        -:  684:
function lat_modulo called 0 returned 0% blocks executed 0%
    #####:  685:void lat_modulo(lat_vm* vm)
        -:  686:{
    #####:  687:    lat_objeto* b = lat_desapilar(vm);
call    0 never executed
    #####:  688:    lat_objeto* a = lat_desapilar(vm);
call    0 never executed
    #####:  689:    if (a->type != T_INT || b->type != T_INT)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  690:    {
    #####:  691:        lat_registrar_error("Intento de aplicar operador \"%%\" en tipos invalidos");
call    0 never executed
        -:  692:    }
    #####:  693:    int tmp = lat_obtener_entero(b);
call    0 never executed
    #####:  694:    if (tmp == 0)
branch  0 never executed
branch  1 never executed
        -:  695:    {
    #####:  696:        lat_registrar_error("Modulo por cero");
call    0 never executed
        -:  697:    }
        -:  698:    else
        -:  699:    {
    #####:  700:        vm->registros[255] = lat_entero_nuevo(vm, (lat_obtener_entero(a) % tmp));
call    0 never executed
call    1 never executed
        -:  701:    }
    #####:  702:}
        -:  703:
function lat_diferente called 0 returned 0% blocks executed 0%
    #####:  704:void lat_diferente(lat_vm* vm)
        -:  705:{
    #####:  706:    lat_objeto* b = lat_desapilar(vm);
call    0 never executed
    #####:  707:    lat_objeto* a = lat_desapilar(vm);
call    0 never executed
    #####:  708:    if (a->type == T_BOOL && b->type == T_BOOL)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  709:    {
    #####:  710:        vm->registros[255] = lat_obtener_logico(a) != lat_obtener_logico(b) ? vm->objeto_cierto : vm->objeto_falso;
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  711:        return;
        -:  712:    }
    #####:  713:    if ((a->type == T_INT || a->type == T_DOUBLE) && (b->type == T_INT || b->type == T_DOUBLE))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  714:    {
    #####:  715:        vm->registros[255] = (lat_obtener_decimal(a) != lat_obtener_decimal(b)) ? vm->objeto_cierto : vm->objeto_falso;
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  716:        return;
        -:  717:    }
    #####:  718:    if (a->type == T_STR && b->type == T_STR)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  719:    {
    #####:  720:        vm->registros[255] = strcmp(lat_obtener_cadena(a), lat_obtener_cadena(b)) != 0 ? vm->objeto_cierto : vm->objeto_falso;
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  721:        return;
        -:  722:    }
    #####:  723:    if (a->type == T_LIT && b->type == T_LIT)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  724:    {
    #####:  725:        vm->registros[255] = strcmp(lat_obtener_literal(a), lat_obtener_literal(b)) != 0 ? vm->objeto_cierto : vm->objeto_falso;
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  726:        return;
        -:  727:    }
    #####:  728:    vm->registros[255] = vm->objeto_falso;
        -:  729:}
        -:  730:
function lat_igualdad called 0 returned 0% blocks executed 0%
    #####:  731:void lat_igualdad(lat_vm* vm)
        -:  732:{
    #####:  733:    lat_objeto* b = lat_desapilar(vm);
call    0 never executed
    #####:  734:    lat_objeto* a = lat_desapilar(vm);
call    0 never executed
    #####:  735:    if (a->type == T_BOOL && b->type == T_BOOL)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  736:    {
    #####:  737:        vm->registros[255] = lat_obtener_logico(a) == lat_obtener_logico(b) ? vm->objeto_cierto : vm->objeto_falso;
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  738:        return;
        -:  739:    }
    #####:  740:    if ((a->type == T_INT || a->type == T_DOUBLE) && (b->type == T_INT || b->type == T_DOUBLE))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  741:    {
    #####:  742:        vm->registros[255] = (lat_obtener_decimal(a) == lat_obtener_decimal(b)) ? vm->objeto_cierto : vm->objeto_falso;
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  743:        return;
        -:  744:    }
    #####:  745:    if (a->type == T_STR && b->type == T_STR)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  746:    {
    #####:  747:        vm->registros[255] = strcmp(lat_obtener_cadena(a), lat_obtener_cadena(b)) == 0 ? vm->objeto_cierto : vm->objeto_falso;
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  748:        return;
        -:  749:    }
    #####:  750:    if (a->type == T_LIT && b->type == T_LIT)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  751:    {
    #####:  752:        vm->registros[255] = strcmp(lat_obtener_literal(a), lat_obtener_literal(b)) == 0 ? vm->objeto_cierto : vm->objeto_falso;
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  753:        return;
        -:  754:    }
    #####:  755:    vm->registros[255] = vm->objeto_falso;
        -:  756:}
        -:  757:
function lat_menor_que called 13 returned 100% blocks executed 39%
       13:  758:void lat_menor_que(lat_vm* vm)
        -:  759:{
       13:  760:    lat_objeto* b = lat_desapilar(vm);
call    0 returned 100%
       13:  761:    lat_objeto* a = lat_desapilar(vm);
call    0 returned 100%
       13:  762:    if ((a->type == T_INT || a->type == T_DOUBLE) && (b->type == T_INT || b->type == T_DOUBLE))
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        -:  763:    {
       13:  764:        vm->registros[255] = (lat_obtener_decimal(a) < lat_obtener_decimal(b)) ? vm->objeto_cierto : vm->objeto_falso;
call    0 returned 100%
call    1 returned 100%
branch  2 taken 85% (fallthrough)
branch  3 taken 15%
       13:  765:        return;
        -:  766:    }
    #####:  767:    if (a->type == T_STR && b->type == T_STR)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  768:    {
    #####:  769:        vm->registros[255] = strcmp(lat_obtener_cadena(a), lat_obtener_cadena(b)) < 0 ? vm->objeto_cierto : vm->objeto_falso;
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  770:        return;
        -:  771:    }
    #####:  772:    if (a->type == T_LIT && b->type == T_LIT)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  773:    {
    #####:  774:        vm->registros[255] = strcmp(lat_obtener_literal(a), lat_obtener_literal(b)) < 0 ? vm->objeto_cierto : vm->objeto_falso;
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  775:        return;
        -:  776:    }
    #####:  777:    lat_registrar_error("Intento de aplicar operador \"<\" en tipos invalidos");
call    0 never executed
        -:  778:}
        -:  779:
function lat_menor_igual called 0 returned 0% blocks executed 0%
    #####:  780:void lat_menor_igual(lat_vm* vm)
        -:  781:{
    #####:  782:    lat_objeto* b = lat_desapilar(vm);
call    0 never executed
    #####:  783:    lat_objeto* a = lat_desapilar(vm);
call    0 never executed
    #####:  784:    if ((a->type == T_INT || a->type == T_DOUBLE) && (b->type == T_INT || b->type == T_DOUBLE))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  785:    {
    #####:  786:        vm->registros[255] = (lat_obtener_decimal(a) <= lat_obtener_decimal(b)) ? vm->objeto_cierto : vm->objeto_falso;
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  787:        return;
        -:  788:    }
    #####:  789:    if (a->type == T_STR && b->type == T_STR)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  790:    {
    #####:  791:        vm->registros[255] = strcmp(lat_obtener_cadena(a), lat_obtener_cadena(b)) <= 0 ? vm->objeto_cierto : vm->objeto_falso;
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  792:        return;
        -:  793:    }
    #####:  794:    if (a->type == T_LIT && b->type == T_LIT)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  795:    {
    #####:  796:        vm->registros[255] = strcmp(lat_obtener_literal(a), lat_obtener_literal(b)) <= 0 ? vm->objeto_cierto : vm->objeto_falso;
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  797:        return;
        -:  798:    }
    #####:  799:    lat_registrar_error("Intento de aplicar operador \"<=\" en tipos invalidos");
call    0 never executed
        -:  800:}
        -:  801:
function lat_mayor_que called 1 returned 100% blocks executed 36%
        1:  802:void lat_mayor_que(lat_vm* vm)
        -:  803:{
        1:  804:    lat_objeto* b = lat_desapilar(vm);
call    0 returned 100%
        1:  805:    lat_objeto* a = lat_desapilar(vm);
call    0 returned 100%
        1:  806:    if ((a->type == T_INT || a->type == T_DOUBLE) && (b->type == T_INT || b->type == T_DOUBLE))
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        -:  807:    {
        1:  808:        vm->registros[255] = (lat_obtener_decimal(a) > lat_obtener_decimal(b)) ? vm->objeto_cierto : vm->objeto_falso;
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        1:  809:        return;
        -:  810:    }
    #####:  811:    if (a->type == T_STR && b->type == T_STR)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  812:    {
    #####:  813:        vm->registros[255] = strcmp(lat_obtener_cadena(a), lat_obtener_cadena(b)) > 0 ? vm->objeto_cierto : vm->objeto_falso;
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  814:        return;
        -:  815:    }
    #####:  816:    if (a->type == T_LIT && b->type == T_LIT)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  817:    {
    #####:  818:        vm->registros[255] = strcmp(lat_obtener_literal(a), lat_obtener_literal(b)) > 0 ? vm->objeto_cierto : vm->objeto_falso;
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  819:        return;
        -:  820:    }
    #####:  821:    lat_registrar_error("Intento de aplicar operador \">\" en tipos invalidos");
call    0 never executed
        -:  822:}
        -:  823:
function lat_mayor_igual called 0 returned 0% blocks executed 0%
    #####:  824:void lat_mayor_igual(lat_vm* vm)
        -:  825:{
    #####:  826:    lat_objeto* b = lat_desapilar(vm);
call    0 never executed
    #####:  827:    lat_objeto* a = lat_desapilar(vm);
call    0 never executed
    #####:  828:    if ((a->type == T_INT || a->type == T_DOUBLE) && (b->type == T_INT || b->type == T_DOUBLE))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  829:    {
    #####:  830:        vm->registros[255] = (lat_obtener_decimal(a) >= lat_obtener_decimal(b)) ? vm->objeto_cierto : vm->objeto_falso;
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  831:        return;
        -:  832:    }
    #####:  833:    if (a->type == T_STR && b->type == T_STR)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  834:    {
    #####:  835:        vm->registros[255] = strcmp(lat_obtener_cadena(a), lat_obtener_cadena(b)) >= 0 ? vm->objeto_cierto : vm->objeto_falso;
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  836:        return;
        -:  837:    }
    #####:  838:    if (a->type == T_LIT && b->type == T_LIT)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  839:    {
    #####:  840:        vm->registros[255] = strcmp(lat_obtener_literal(a), lat_obtener_literal(b)) >= 0 ? vm->objeto_cierto : vm->objeto_falso;
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  841:        return;
        -:  842:    }
    #####:  843:    lat_registrar_error("Intento de aplicar operador \">=\" en tipos invalidos");
call    0 never executed
        -:  844:}
        -:  845:
function lat_y called 0 returned 0% blocks executed 0%
    #####:  846:void lat_y(lat_vm* vm)
        -:  847:{
    #####:  848:    lat_objeto* b = lat_desapilar(vm);
call    0 never executed
    #####:  849:    lat_objeto* a = lat_desapilar(vm);
call    0 never executed
    #####:  850:    if ((b->type != T_BOOL && b->type != T_INT) || (a->type != T_BOOL && a->type != T_INT))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  851:    {
    #####:  852:        lat_registrar_error("Intento de aplicar operador \"y\" en tipos invalidos");
call    0 never executed
        -:  853:    }
    #####:  854:    vm->registros[255] =  (lat_obtener_logico(a) && lat_obtener_logico(b)) == true ? vm->objeto_cierto : vm->objeto_falso;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  855:}
        -:  856:
function lat_o called 0 returned 0% blocks executed 0%
    #####:  857:void lat_o(lat_vm* vm)
        -:  858:{
    #####:  859:    lat_objeto* b = lat_desapilar(vm);
call    0 never executed
    #####:  860:    lat_objeto* a = lat_desapilar(vm);
call    0 never executed
    #####:  861:    if ((b->type != T_BOOL && b->type != T_INT) || (a->type != T_BOOL && a->type != T_INT))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  862:    {
    #####:  863:        lat_registrar_error("Intento de aplicar operador \"y\" en tipos invalidos");
call    0 never executed
        -:  864:    }
    #####:  865:    vm->registros[255] =  (lat_obtener_logico(a) || lat_obtener_logico(b)) == true ? vm->objeto_cierto : vm->objeto_falso;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  866:}
        -:  867:
function lat_negacion called 0 returned 0% blocks executed 0%
    #####:  868:void lat_negacion(lat_vm* vm)
        -:  869:{
    #####:  870:    lat_objeto* o = lat_desapilar(vm);
call    0 never executed
    #####:  871:    if (o->type != T_BOOL)
branch  0 never executed
branch  1 never executed
        -:  872:    {
    #####:  873:        lat_registrar_error("Intento de negar tipo invalido");
call    0 never executed
        -:  874:    }
    #####:  875:    vm->registros[255] =  (lat_obtener_logico(o) == false) ? vm->objeto_cierto : vm->objeto_falso;
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  876:}
        -:  877:
function lat_bc called 728 returned 100% blocks executed 100%
      728:  878:lat_bytecode lat_bc(lat_ins i, int a, int b, void* meta)
        -:  879:{
        -:  880:    lat_bytecode ret;
        -:  881:    ret.ins = i;
        -:  882:    ret.a = a;
        -:  883:    ret.b = b;
        -:  884:    ret.meta = meta;
      728:  885:    return ret;
        -:  886:}
        -:  887:
function lista_modificar_elemento called 0 returned 0% blocks executed 0%
    #####:  888:void lista_modificar_elemento(list_node* l, void* data, int pos)
        -:  889:{
        -:  890:    list_node* c;
        -:  891:    int i = -1;
    #####:  892:    if(pos < 0 || pos >= length_list(l))
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -:  893:    {
    #####:  894:        lat_registrar_error("Indice fuera de rango");
call    0 never executed
        -:  895:    }
    #####:  896:    for (c = l; c->next != NULL; c = c->next)
branch  0 never executed
branch  1 never executed
        -:  897:    {
    #####:  898:        if(i == pos)
branch  0 never executed
branch  1 never executed
        -:  899:        {
    #####:  900:            c->data = data;
    #####:  901:            return;
        -:  902:        }
    #####:  903:        i++;
        -:  904:    }
        -:  905:}
        -:  906:
function lista_obtener_elemento called 0 returned 0% blocks executed 0%
    #####:  907:lat_objeto* lista_obtener_elemento(list_node* l, int pos)
        -:  908:{
        -:  909:    list_node* c;
        -:  910:    int i = -1;
    #####:  911:    if(pos < 0 || pos >= length_list(l))
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -:  912:    {
    #####:  913:        lat_registrar_error("Indice fuera de rango");
call    0 never executed
        -:  914:    }
    #####:  915:    for (c = l; c->next != NULL; c = c->next)
branch  0 never executed
branch  1 never executed
        -:  916:    {
    #####:  917:        if(i == pos)
branch  0 never executed
branch  1 never executed
        -:  918:        {
    #####:  919:            return (lat_objeto *)c->data;
        -:  920:        }
    #####:  921:        i++;
        -:  922:    }
        -:  923:    return NULL;
        -:  924:}
        -:  925:
function lat_llamar_funcion called 80 returned 100% blocks executed 70%
       80:  926:void lat_llamar_funcion(lat_vm* vm, lat_objeto* func)
        -:  927:{
       80:  928:    if (func->type == T_FUNC)
branch  0 taken 5% (fallthrough)
branch  1 taken 95%
        -:  929:    {
        4:  930:        if(!vm->REPL)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  931:        {
        4:  932:            lat_apilar_contexto(vm);
call    0 returned 100%
        -:  933:        }
        8:  934:        lat_asignar_contexto_objeto(lat_obtener_contexto(vm), lat_cadena_nueva(vm, "$"), func);
call    0 returned 100%
call    1 returned 100%
        4:  935:        lat_bytecode* inslist = ((lat_function*)func->data.func)->bcode;
        -:  936:        lat_bytecode cur;
        -:  937:        int pos;
      997:  938:        for (pos = 0, cur = inslist[pos]; cur.ins != OP_END; cur = inslist[++pos])
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -:  939:        {
      993:  940:            switch (cur.ins)
branch  0 taken 13%
branch  1 taken 2%
branch  2 taken 15%
branch  3 taken 2%
branch  4 taken 1%
branch  5 taken 3%
branch  6 taken 1%
branch  7 taken 16%
branch  8 taken 1%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 17%
branch 14 taken 0%
branch 15 taken 17%
branch 16 taken 1%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 1%
branch 20 taken 2%
branch 21 taken 8%
branch 22 taken 1%
branch 23 taken 1%
branch 24 taken 0%
branch 25 taken 0%
branch 26 taken 0%
        -:  941:            {
        -:  942:            case OP_END:
       80:  943:                return;
        -:  944:                break;
        -:  945:            case OP_NOP:
        -:  946:                break;
        -:  947:            case OP_PUSH:
      129:  948:                lat_apilar(vm, vm->registros[cur.a]);
        -:  949:                break;
        -:  950:            case OP_POP:
       20:  951:                vm->registros[cur.a] = lat_desapilar(vm);
call    0 returned 100%
       20:  952:                break;
        -:  953:            case OP_GET:
      153:  954:                vm->registros[cur.a] = lat_obtener_contexto_objeto(vm->registros[cur.b], vm->registros[cur.a]);
call    0 returned 100%
      153:  955:                break;
        -:  956:            case OP_SET:
       20:  957:                lat_asignar_contexto_objeto(vm->registros[cur.b], lat_clonar_objeto(vm, ((lat_objeto*)cur.meta)), vm->registros[cur.a]);
call    0 returned 100%
call    1 returned 100%
       20:  958:                break;
        -:  959:            case OP_STORELIT:
        2:  960:                vm->registros[cur.a] = ((lat_objeto*)cur.meta);
        2:  961:                break;
        -:  962:            case OP_STOREINT:
       25:  963:                vm->registros[cur.a] = ((lat_objeto*)cur.meta);
       25:  964:                break;
        -:  965:            case OP_STOREDOUBLE:
        6:  966:                vm->registros[cur.a] = ((lat_objeto*)cur.meta);
        6:  967:                break;
        -:  968:            case OP_STORESTR:
        -:  969:            {
      162:  970:                vm->registros[cur.a] = ((lat_objeto*)cur.meta);
        -:  971:            }
      162:  972:            break;
        -:  973:            case OP_STOREBOOL:
        1:  974:                vm->registros[cur.a] = ((lat_objeto*)cur.meta);
        1:  975:                break;
        -:  976:            case OP_STORELIST:
    #####:  977:                vm->registros[cur.a] = lat_lista_nueva(vm, lat_crear_lista());
call    0 never executed
call    1 never executed
    #####:  978:                break;
        -:  979:            case OP_PUSHLIST:
    #####:  980:                lat_apilar_lista(vm->registros[cur.a], vm->registros[cur.b]);
        -:  981:                break;
        -:  982:            case OP_POPLIST:
        -:  983:                //TODO: Pendiente
        -:  984:                //vm->registros[cur.a] = lat_desapilar_lista(vm->registros[cur.b]);
        -:  985:                break;
        -:  986:            case OP_LISTGETITEM:
        -:  987:            {
    #####:  988:                lat_objeto *l = vm->registros[cur.a];
    #####:  989:                lat_objeto *pos = vm->registros[cur.b];
    #####:  990:                vm->registros[cur.a] = lista_obtener_elemento(l->data.lista, pos->data.i);
call    0 never executed
        -:  991:            }
    #####:  992:            break;
        -:  993:            case OP_LISTSETITEM:
        -:  994:            {
    #####:  995:                lat_objeto *l = vm->registros[cur.a];
    #####:  996:                lat_objeto *pos = vm->registros[(long) cur.meta];
    #####:  997:                if(pos->type != T_INT)
branch  0 never executed
branch  1 never executed
        -:  998:                {
    #####:  999:                    lat_registrar_error("%s", "la posicion de la lista no es un entero");
call    0 never executed
        -: 1000:                }
    #####: 1001:                lista_modificar_elemento(l->data.lista, (lat_objeto*)vm->registros[cur.b], pos->data.i);
call    0 never executed
        -: 1002:            }
    #####: 1003:            break;
        -: 1004:            case OP_STOREDICT:
        -: 1005:                //TODO: Pendiente
        -: 1006:                //vm->registros[cur.a] = lat_lista_nueva(vm, make_dict());
        -: 1007:                break;
        -: 1008:            case OP_PUSHDICT:
        -: 1009:                //TODO: Pendiente
        -: 1010:                //lat_push_dict(vm->registros[cur.a], vm->registros[cur.b]);
        -: 1011:                break;
        -: 1012:            case OP_POPDICT:
        -: 1013:                //TODO: Pendiente
        -: 1014:                //vm->registros[cur.a] = lat_pop_dict(vm->registros[cur.b]);
        -: 1015:                break;
        -: 1016:            case OP_MOV:
      170: 1017:                vm->registros[cur.a] = vm->registros[cur.b];
      170: 1018:                break;
        -: 1019:            case OP_GLOBALNS:
    #####: 1020:                vm->registros[cur.a] = vm->contexto_pila[0];
    #####: 1021:                break;
        -: 1022:            case OP_LOCALNS:
      173: 1023:                vm->registros[cur.a] = lat_obtener_contexto(vm);
      173: 1024:                break;
        -: 1025:            case OP_FN:
        3: 1026:                vm->registros[cur.a] = lat_definir_funcion(vm, (lat_bytecode*)cur.meta);
call    0 returned 100%
        3: 1027:                break;
        -: 1028:            case OP_NS:
    #####: 1029:                vm->registros[cur.a] = lat_clonar_objeto(vm, lat_obtener_contexto(vm));
call    0 never executed
    #####: 1030:                lat_apilar_contexto_predefinido(vm, vm->registros[cur.a]);
call    0 never executed
    #####: 1031:                break;
        -: 1032:            case OP_ENDNS:
    #####: 1033:                vm->registros[cur.a] = lat_desapilar_contexto_predefinido(vm);
call    0 never executed
    #####: 1034:                break;
        -: 1035:            case OP_JMP:
       10: 1036:                pos = cur.a - 1;
       10: 1037:                break;
        -: 1038:            case OP_JMPIF:
       16: 1039:                if (lat_obtener_logico(vm->registros[cur.b]))
call    0 returned 100%
branch  1 taken 19% (fallthrough)
branch  2 taken 81%
        -: 1040:                {
        3: 1041:                    pos = cur.a - 1;
        -: 1042:                }
        -: 1043:                break;
        -: 1044:            case OP_CALL:
       79: 1045:                if(vm->registros[cur.a] != NULL)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1046:                {
       79: 1047:                    lat_llamar_funcion(vm, vm->registros[cur.a]);
call    0 returned 100%
        -: 1048:                }
        -: 1049:                break;
        -: 1050:            case OP_NOT:
       14: 1051:                vm->registros[cur.a] = lat_obtener_logico(vm->registros[cur.a]) == true ? vm->objeto_falso : vm->objeto_cierto;
call    0 returned 100%
branch  1 taken 79% (fallthrough)
branch  2 taken 21%
       14: 1052:                break;
        -: 1053:            case OP_INC:
       10: 1054:                ((lat_objeto*)vm->registros[cur.a])->data.i++;
       10: 1055:                break;
        -: 1056:            case OP_DEC:
    #####: 1057:                ((lat_objeto*)vm->registros[cur.a])->data.i--;
    #####: 1058:                break;
        -: 1059:            case OP_PUSHDICTELEM:
        -: 1060:                break;
        -: 1061:            case OP_DICTGETITEM:
        -: 1062:                break;
        -: 1063:            case OP_DICTSETITEM:
        -: 1064:                break;
        -: 1065:            }
        -: 1066:        }
        4: 1067:        if(!vm->REPL)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1068:        {
        4: 1069:            lat_desapilar_contexto(vm);
call    0 returned 100%
        -: 1070:        }
        -: 1071:    }
       76: 1072:    else if (func->type == T_CFUNC)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1073:    {
       76: 1074:        ((void (*)(lat_vm*))(func->data.func))(vm);
call    0 returned 100%
        -: 1075:    }
        -: 1076:    else
        -: 1077:    {
        -: 1078:        debug("func->type: %d", func->type);
    #####: 1079:        lat_registrar_error("Object not a function");
call    0 never executed
        -: 1080:    }
        -: 1081:}
        -: 1082:
        -: 1083:
function lat_logico called 0 returned 0% blocks executed 0%
    #####: 1084:void lat_logico(lat_vm* vm)
        -: 1085:{
    #####: 1086:    lat_objeto* a = lat_desapilar(vm);
call    0 never executed
    #####: 1087:    switch (a->type)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
        -: 1088:    {
        -: 1089:    case T_INT:
    #####: 1090:        if(a->data.i == 0)
branch  0 never executed
branch  1 never executed
        -: 1091:        {
    #####: 1092:            vm->registros[255] = vm->objeto_falso;
        -: 1093:        }
        -: 1094:        else
        -: 1095:        {
    #####: 1096:            vm->registros[255] = vm->objeto_cierto;
        -: 1097:        }
        -: 1098:        break;
        -: 1099:    case T_LIT:
    #####: 1100:        if(strcmp(a->data.c, "") == 0)
branch  0 never executed
branch  1 never executed
        -: 1101:        {
    #####: 1102:            vm->registros[255] = vm->objeto_falso;
        -: 1103:        }
        -: 1104:        else
        -: 1105:        {
    #####: 1106:            vm->registros[255] = vm->objeto_cierto;
        -: 1107:        }
        -: 1108:        break;
        -: 1109:    case T_DOUBLE:
    #####: 1110:        if((int)a->data.d == 0)
branch  0 never executed
branch  1 never executed
        -: 1111:        {
    #####: 1112:            vm->registros[255] = vm->objeto_falso;
        -: 1113:        }
        -: 1114:        else
        -: 1115:        {
    #####: 1116:            vm->registros[255] = vm->objeto_cierto;
        -: 1117:        }
        -: 1118:        break;
        -: 1119:    case T_STR:
    #####: 1120:        if(strcmp(a->data.str, "") == 0)
branch  0 never executed
branch  1 never executed
        -: 1121:        {
    #####: 1122:            vm->registros[255] = vm->objeto_falso;
        -: 1123:        }
        -: 1124:        else
        -: 1125:        {
    #####: 1126:            vm->registros[255] = vm->objeto_cierto;
        -: 1127:        }
        -: 1128:        break;
        -: 1129:    default:
    #####: 1130:        lat_registrar_error("conversion incompatible");
call    0 never executed
    #####: 1131:        break;
        -: 1132:    }
    #####: 1133:}
function lat_entero called 0 returned 0% blocks executed 0%
    #####: 1134:void lat_entero(lat_vm* vm)
        -: 1135:{
    #####: 1136:    lat_objeto* a = lat_desapilar(vm);
call    0 never executed
    #####: 1137:    switch (a->type)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
        -: 1138:    {
        -: 1139:    case T_BOOL:
    #####: 1140:        if(a->data.b == false)
branch  0 never executed
branch  1 never executed
        -: 1141:        {
    #####: 1142:            vm->registros[255] = lat_entero_nuevo(vm, 0);
call    0 never executed
        -: 1143:        }
        -: 1144:        else
        -: 1145:        {
    #####: 1146:            vm->registros[255] = lat_entero_nuevo(vm, 1);
call    0 never executed
        -: 1147:        }
        -: 1148:        break;
        -: 1149:    case T_LIT:
        -: 1150:    {
        -: 1151:        char *ptr;
        -: 1152:        long ret;
    #####: 1153:        ret =strtol(a->data.c, &ptr, 10);
call    0 never executed
    #####: 1154:        if(strcmp(ptr, "") == 0)
branch  0 never executed
branch  1 never executed
        -: 1155:        {
    #####: 1156:            vm->registros[255] = lat_entero_nuevo(vm, ret);
call    0 never executed
        -: 1157:        }
        -: 1158:        else
        -: 1159:        {
    #####: 1160:            lat_registrar_error("conversion incompatible");
call    0 never executed
        -: 1161:        }
        -: 1162:    }
    #####: 1163:    break;
        -: 1164:    case T_DOUBLE:
    #####: 1165:        vm->registros[255] = lat_entero_nuevo(vm, (int)a->data.d);
call    0 never executed
    #####: 1166:        break;
        -: 1167:    case T_STR:
        -: 1168:    {
        -: 1169:        char *ptr;
        -: 1170:        long ret;
    #####: 1171:        ret =strtol(a->data.str, &ptr, 10);
call    0 never executed
    #####: 1172:        if(strcmp(ptr, "") == 0)
branch  0 never executed
branch  1 never executed
        -: 1173:        {
    #####: 1174:            vm->registros[255] = lat_entero_nuevo(vm, ret);
call    0 never executed
        -: 1175:        }
        -: 1176:        else
        -: 1177:        {
    #####: 1178:            lat_registrar_error("conversion incompatible");
call    0 never executed
        -: 1179:        }
        -: 1180:    }
    #####: 1181:    break;
        -: 1182:    default:
    #####: 1183:        lat_registrar_error("conversion incompatible");
call    0 never executed
    #####: 1184:        break;
        -: 1185:    }
    #####: 1186:}
function lat_literal called 0 returned 0% blocks executed 0%
    #####: 1187:void lat_literal(lat_vm* vm)
        -: 1188:{
    #####: 1189:    lat_objeto* a = lat_desapilar(vm);
call    0 never executed
    #####: 1190:    switch (a->type)
branch  0 never executed
branch  1 never executed
branch  2 never executed
        -: 1191:    {
        -: 1192:    case T_BOOL:
    #####: 1193:        if(a->data.b == false)
branch  0 never executed
branch  1 never executed
        -: 1194:        {
    #####: 1195:            vm->registros[255] = lat_literal_nuevo(vm, "falso");
call    0 never executed
        -: 1196:        }
        -: 1197:        else
        -: 1198:        {
    #####: 1199:            vm->registros[255] = lat_literal_nuevo(vm, "verdadero");
call    0 never executed
        -: 1200:        }
        -: 1201:        break;
        -: 1202:    case T_STR:
        -: 1203:    {
    #####: 1204:        vm->registros[255] = a;
        -: 1205:    }
    #####: 1206:    break;
        -: 1207:    default:
    #####: 1208:        lat_registrar_error("conversion incompatible");
call    0 never executed
    #####: 1209:        break;
        -: 1210:    }
    #####: 1211:}
function lat_decimal called 0 returned 0% blocks executed 0%
    #####: 1212:void lat_decimal(lat_vm* vm)
        -: 1213:{
    #####: 1214:    lat_objeto* a = lat_desapilar(vm);
call    0 never executed
    #####: 1215:    switch (a->type)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
        -: 1216:    {
        -: 1217:    case T_BOOL:
    #####: 1218:        if(a->data.b == false)
branch  0 never executed
branch  1 never executed
        -: 1219:        {
    #####: 1220:            vm->registros[255] = lat_decimal_nuevo(vm, 0);
call    0 never executed
        -: 1221:        }
        -: 1222:        else
        -: 1223:        {
    #####: 1224:            vm->registros[255] = lat_decimal_nuevo(vm, 1);
call    0 never executed
        -: 1225:        }
        -: 1226:        break;
        -: 1227:    case T_INT:
    #####: 1228:        vm->registros[255] = lat_decimal_nuevo(vm, (double)a->data.i);
call    0 never executed
    #####: 1229:        break;
        -: 1230:    case T_DOUBLE:
    #####: 1231:        vm->registros[255] = lat_decimal_nuevo(vm, (double)a->data.i);
call    0 never executed
    #####: 1232:        break;
        -: 1233:    case T_STR:
        -: 1234:    {
        -: 1235:        char *ptr;
        -: 1236:        double ret;
    #####: 1237:        ret =strtod(a->data.str, &ptr);
call    0 never executed
    #####: 1238:        if(strcmp(ptr, "") == 0)
branch  0 never executed
branch  1 never executed
        -: 1239:        {
    #####: 1240:            vm->registros[255] = lat_decimal_nuevo(vm, ret);
call    0 never executed
        -: 1241:        }
        -: 1242:        else
        -: 1243:        {
    #####: 1244:            lat_registrar_error("conversion incompatible");
call    0 never executed
        -: 1245:        }
        -: 1246:    }
    #####: 1247:    break;
        -: 1248:    default:
    #####: 1249:        lat_registrar_error("conversion incompatible");
call    0 never executed
    #####: 1250:        break;
        -: 1251:    }
    #####: 1252:}
        -: 1253:
function lat_cadena called 0 returned 0% blocks executed 0%
    #####: 1254:void lat_cadena(lat_vm* vm)
        -: 1255:{
    #####: 1256:    lat_objeto* a = lat_desapilar(vm);
call    0 never executed
    #####: 1257:    switch (a->type)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1258:    {
        -: 1259:    case T_BOOL:
    #####: 1260:        vm->registros[255] = lat_cadena_nueva(vm, bool2str(a->data.b));
call    0 never executed
call    1 never executed
    #####: 1261:        break;
        -: 1262:    case T_INT:
    #####: 1263:        vm->registros[255] = lat_cadena_nueva(vm, int2str(a->data.i));
call    0 never executed
call    1 never executed
    #####: 1264:        break;
        -: 1265:    case T_DOUBLE:
    #####: 1266:        vm->registros[255] = lat_cadena_nueva(vm, double2str(a->data.d));
call    0 never executed
call    1 never executed
    #####: 1267:        break;
        -: 1268:    default:
    #####: 1269:        vm->registros[255] = a;
    #####: 1270:        break;
        -: 1271:    }
    #####: 1272:}
        -: 1273:
function lat_maximo called 0 returned 0% blocks executed 0%
    #####: 1274:void lat_maximo(lat_vm* vm)
        -: 1275:{
    #####: 1276:    lat_objeto* b = lat_desapilar(vm);
call    0 never executed
    #####: 1277:    lat_objeto* a = lat_desapilar(vm);
call    0 never executed
    #####: 1278:    if(lat_obtener_entero(b) > lat_obtener_entero(a))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 1279:    {
    #####: 1280:        vm->registros[255] = b;
        -: 1281:    }
        -: 1282:    else
        -: 1283:    {
    #####: 1284:        vm->registros[255] = a;
        -: 1285:    }
    #####: 1286:}
        -: 1287:
function lat_minimo called 0 returned 0% blocks executed 0%
    #####: 1288:void lat_minimo(lat_vm* vm)
        -: 1289:{
    #####: 1290:    lat_objeto* b = lat_desapilar(vm);
call    0 never executed
    #####: 1291:    lat_objeto* a = lat_desapilar(vm);
call    0 never executed
    #####: 1292:    if(lat_obtener_entero(b) < lat_obtener_entero(a))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 1293:    {
    #####: 1294:        vm->registros[255] = b;
        -: 1295:    }
        -: 1296:    else
        -: 1297:    {
    #####: 1298:        vm->registros[255] = a;
        -: 1299:    }
    #####: 1300:}
        -: 1301:
function lat_tipo called 0 returned 0% blocks executed 0%
    #####: 1302:void lat_tipo(lat_vm* vm)
        -: 1303:{
    #####: 1304:    lat_objeto* a = lat_desapilar(vm);
call    0 never executed
    #####: 1305:    switch (a->type)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
        -: 1306:    {
        -: 1307:    case T_BOOL:
    #####: 1308:        vm->registros[255] = lat_cadena_nueva(vm, "logico");
call    0 never executed
    #####: 1309:        break;
        -: 1310:    case T_INT:
    #####: 1311:        vm->registros[255] = lat_cadena_nueva(vm, "entero");
call    0 never executed
    #####: 1312:        break;
        -: 1313:    case T_DOUBLE:
    #####: 1314:        vm->registros[255] = lat_cadena_nueva(vm, "decimal");
call    0 never executed
    #####: 1315:        break;
        -: 1316:    case T_STR:
    #####: 1317:        vm->registros[255] = lat_cadena_nueva(vm, "cadena");
call    0 never executed
    #####: 1318:        break;
        -: 1319:    case T_LIT:
    #####: 1320:        vm->registros[255] = lat_cadena_nueva(vm, "cadena");
call    0 never executed
    #####: 1321:        break;
        -: 1322:    case T_LIST:
    #####: 1323:        vm->registros[255] = lat_cadena_nueva(vm, "lista");
call    0 never executed
    #####: 1324:        break;
        -: 1325:    case T_DICT:
    #####: 1326:        vm->registros[255] = lat_cadena_nueva(vm, "diccionario");
call    0 never executed
    #####: 1327:        break;
        -: 1328:    default:
    #####: 1329:        vm->registros[255] = lat_cadena_nueva(vm, "nulo");
call    0 never executed
    #####: 1330:        break;
        -: 1331:    }
    #####: 1332:}
        -: 1333:
function lat_salir called 0 returned 0% blocks executed 0%
    #####: 1334:void lat_salir(lat_vm* vm)
        -: 1335:{
    #####: 1336:    vm->registros[255] = lat_entero_nuevo(vm, 0L);
call    0 never executed
    #####: 1337:    exit(0);
        -: 1338:}
