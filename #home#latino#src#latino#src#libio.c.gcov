        -:    0:Source:/home/latino/src/latino/src/libio.c
        -:    0:Programs:13
        -:    1:/*
        -:    2:The MIT License (MIT)
        -:    3:
        -:    4:Copyright (c) 2015 - Latino
        -:    5:
        -:    6:Permission is hereby granted, free of charge, to any person obtaining a copy
        -:    7:of this software and associated documentation files (the "Software"), to deal
        -:    8:in the Software without restriction, including without limitation the rights
        -:    9:to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
        -:   10:copies of the Software, and to permit persons to whom the Software is
        -:   11:furnished to do so, subject to the following conditions:
        -:   12:
        -:   13:The above copyright notice and this permission notice shall be included in
        -:   14:all copies or substantial portions of the Software.
        -:   15:
        -:   16:THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        -:   17:IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
        -:   18:FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
        -:   19:AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
        -:   20:LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
        -:   21:OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
        -:   22:THE SOFTWARE.
        -:   23:*/
        -:   24:
        -:   25:#include <stdio.h>
        -:   26:#include <string.h>
        -:   27:#include "libio.h"
        -:   28:#include "vm.h"
        -:   29:
function lat_leer called 0 returned 0% blocks executed 0%
    #####:   30:void lat_leer(lat_vm *vm)
        -:   31:{
        -:   32:    char str[254];
    #####:   33:    fgets(str, 254, stdin);
call    0 never executed
    #####:   34:    int i = strlen(str) - 1;
    #####:   35:    if (str[i] == '\n')
branch  0 never executed
branch  1 never executed
    #####:   36:        str[i] = '\0';
        -:   37:
        -:   38:    //obtiene decimal
        -:   39:    char *ptr;
        -:   40:    double ret;
    #####:   41:    ret =strtod(str, &ptr);
call    0 never executed
    #####:   42:    if(strcmp(ptr, "") == 0)
branch  0 never executed
branch  1 never executed
        -:   43:    {
    #####:   44:        vm->registros[255] = lat_decimal_nuevo(vm, ret);
call    0 never executed
        -:   45:    }
        -:   46:    else
        -:   47:    {
    #####:   48:        vm->registros[255] = lat_cadena_nueva(vm, parse_string(str, strlen(str)));
call    0 never executed
call    1 never executed
        -:   49:    }
    #####:   50:}
function lat_leer_archivo called 0 returned 0% blocks executed 0%
    #####:   51:void lat_leer_archivo(lat_vm *vm)
        -:   52:{
    #####:   53:    lat_objeto* o = lat_desapilar(vm);
call    0 never executed
        -:   54:
    #####:   55:    if(o->type == T_STR || o->type == T_LIT)
branch  0 never executed
branch  1 never executed
        -:   56:    {
        -:   57:        FILE *fp;
        -:   58:        char *buf;
    #####:   59:        fp = fopen(lat_obtener_cadena(o), "r");
call    0 never executed
call    1 never executed
    #####:   60:        if (fp == NULL)
branch  0 never executed
branch  1 never executed
        -:   61:        {
    #####:   62:            lat_registrar_error("No se pudo abrir el archivo\n");
call    0 never executed
        -:   63:        }
    #####:   64:        fseek(fp, 0, SEEK_END);
call    0 never executed
    #####:   65:        int fsize = ftell(fp);
call    0 never executed
    #####:   66:        fseek(fp, 0, SEEK_SET);
call    0 never executed
    #####:   67:        buf = calloc(fsize, 1);
    #####:   68:        size_t newSize = fread(buf, sizeof(char), fsize, fp);
call    0 never executed
    #####:   69:        if (buf == NULL)
branch  0 never executed
branch  1 never executed
        -:   70:        {
    #####:   71:            printf("No se pudo asignar %d bytes de memoria\n", fsize);
call    0 never executed
        -:   72:        }
    #####:   73:        buf[newSize] = '\0';
    #####:   74:        vm->registros[255] = lat_cadena_nueva(vm, buf);
call    0 never executed
        -:   75:    }
        -:   76:    else
        -:   77:    {
    #####:   78:        lat_registrar_error("No se pudo abrir el archivo\n");
call    0 never executed
        -:   79:    }
    #####:   80:}
        -:   81:
function lat_escribir_archivo called 0 returned 0% blocks executed 0%
    #####:   82:void lat_escribir_archivo(lat_vm *vm)
        -:   83:{
    #####:   84:    lat_objeto* s = lat_desapilar(vm);
call    0 never executed
    #####:   85:    lat_objeto* o = lat_desapilar(vm);
call    0 never executed
    #####:   86:    if(o->type == T_STR || o->type == T_LIT)
branch  0 never executed
branch  1 never executed
        -:   87:    {
        -:   88:        FILE* fp;
    #####:   89:        fp = fopen(lat_obtener_cadena(o), "w");
call    0 never executed
call    1 never executed
    #####:   90:        const char* cad = lat_obtener_cadena(s);
call    0 never executed
    #####:   91:        size_t lon = strlen(cad);
    #####:   92:        fwrite(cad, 1 , lon , fp);
call    0 never executed
    #####:   93:        fclose(fp);
call    0 never executed
        -:   94:    }
        -:   95:    else
        -:   96:    {
    #####:   97:        lat_registrar_error("No se pudo escribir en el archivo\n");
call    0 never executed
        -:   98:    }
    #####:   99:}
        -:  100:
function lat_sistema called 0 returned 0% blocks executed 0%
    #####:  101:void lat_sistema(lat_vm *vm)
        -:  102:{
    #####:  103:    lat_objeto* o = lat_desapilar(vm);
call    0 never executed
    #####:  104:    if(o->type == T_STR || o->type == T_LIT)
branch  0 never executed
branch  1 never executed
        -:  105:    {
    #####:  106:        system(lat_obtener_cadena(o));
call    0 never executed
call    1 never executed
        -:  107:    }
        -:  108:    else
        -:  109:    {
    #####:  110:        lat_registrar_error("El argumento esperado debe de ser una cadena\n");
call    0 never executed
        -:  111:    }
    #####:  112:}
